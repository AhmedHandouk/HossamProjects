
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002772  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00002772  000027e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002028  00000000  00000000  00002818  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000013ef  00000000  00000000  00004840  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e7       	ldi	r30, 0x72	; 114
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 83 12 	call	0x2506	; 0x2506 <main>
      7a:	0c 94 b7 13 	jmp	0x276e	; 0x276e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 80 13 	jmp	0x2700	; 0x2700 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 9c 13 	jmp	0x2738	; 0x2738 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 a8 13 	jmp	0x2750	; 0x2750 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 a8 13 	jmp	0x2750	; 0x2750 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 80 13 	jmp	0x2700	; 0x2700 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 9c 13 	jmp	0x2738	; 0x2738 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 88 13 	jmp	0x2710	; 0x2710 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 a4 13 	jmp	0x2748	; 0x2748 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 a8 13 	jmp	0x2750	; 0x2750 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 a8 13 	jmp	0x2750	; 0x2750 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 a8 13 	jmp	0x2750	; 0x2750 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 90 13 	jmp	0x2720	; 0x2720 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 ac 13 	jmp	0x2758	; 0x2758 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <SPI_MasterInit>:
 */

#include "master.h"

void SPI_MasterInit(void)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
//	SET_BIT(SPCR,MSTR);
//	CLR_BIT(SPSR,SPI2X);
//	CLR_BIT(SPCR,SPR1);
//	SET_BIT(SPCR,SPR0);

SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     c96:	ed e2       	ldi	r30, 0x2D	; 45
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	81 e5       	ldi	r24, 0x51	; 81
     c9c:	80 83       	st	Z, r24
}
     c9e:	cf 91       	pop	r28
     ca0:	df 91       	pop	r29
     ca2:	08 95       	ret

00000ca4 <SPI_MasterTransmit>:

void SPI_MasterTransmit(char cData)
{
     ca4:	df 93       	push	r29
     ca6:	cf 93       	push	r28
     ca8:	0f 92       	push	r0
     caa:	cd b7       	in	r28, 0x3d	; 61
     cac:	de b7       	in	r29, 0x3e	; 62
     cae:	89 83       	std	Y+1, r24	; 0x01
/* Start transmission */
SPDR = cData;
     cb0:	ef e2       	ldi	r30, 0x2F	; 47
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	80 83       	st	Z, r24
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF)))
     cb8:	ee e2       	ldi	r30, 0x2E	; 46
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	88 23       	and	r24, r24
     cc0:	dc f7       	brge	.-10     	; 0xcb8 <SPI_MasterTransmit+0x14>
;

}
     cc2:	0f 90       	pop	r0
     cc4:	cf 91       	pop	r28
     cc6:	df 91       	pop	r29
     cc8:	08 95       	ret

00000cca <Dio_read>:
 *      Author: Mohamed Abdalla
 */
#include "Dio.h"


DIO_Level Dio_read(Channel_Type channel) {
     cca:	df 93       	push	r29
     ccc:	cf 93       	push	r28
     cce:	00 d0       	rcall	.+0      	; 0xcd0 <Dio_read+0x6>
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62
     cd4:	89 83       	std	Y+1, r24	; 0x01

}
     cd6:	0f 90       	pop	r0
     cd8:	0f 90       	pop	r0
     cda:	cf 91       	pop	r28
     cdc:	df 91       	pop	r29
     cde:	08 95       	ret

00000ce0 <Dio_write>:


void Dio_write(Channel_Type channel, DIO_Level level) {
     ce0:	df 93       	push	r29
     ce2:	cf 93       	push	r28
     ce4:	00 d0       	rcall	.+0      	; 0xce6 <Dio_write+0x6>
     ce6:	00 d0       	rcall	.+0      	; 0xce8 <Dio_write+0x8>
     ce8:	00 d0       	rcall	.+0      	; 0xcea <Dio_write+0xa>
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
     cee:	8b 83       	std	Y+3, r24	; 0x03
     cf0:	6c 83       	std	Y+4, r22	; 0x04
	DIO_Port port = channel / 8;
     cf2:	8b 81       	ldd	r24, Y+3	; 0x03
     cf4:	86 95       	lsr	r24
     cf6:	86 95       	lsr	r24
     cf8:	86 95       	lsr	r24
     cfa:	8a 83       	std	Y+2, r24	; 0x02
	DIO_Pin pin = channel % 8;
     cfc:	8b 81       	ldd	r24, Y+3	; 0x03
     cfe:	87 70       	andi	r24, 0x07	; 7
     d00:	89 83       	std	Y+1, r24	; 0x01

	switch (port) {
     d02:	8a 81       	ldd	r24, Y+2	; 0x02
     d04:	28 2f       	mov	r18, r24
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	3e 83       	std	Y+6, r19	; 0x06
     d0a:	2d 83       	std	Y+5, r18	; 0x05
     d0c:	8d 81       	ldd	r24, Y+5	; 0x05
     d0e:	9e 81       	ldd	r25, Y+6	; 0x06
     d10:	81 30       	cpi	r24, 0x01	; 1
     d12:	91 05       	cpc	r25, r1
     d14:	09 f4       	brne	.+2      	; 0xd18 <Dio_write+0x38>
     d16:	43 c0       	rjmp	.+134    	; 0xd9e <Dio_write+0xbe>
     d18:	2d 81       	ldd	r18, Y+5	; 0x05
     d1a:	3e 81       	ldd	r19, Y+6	; 0x06
     d1c:	22 30       	cpi	r18, 0x02	; 2
     d1e:	31 05       	cpc	r19, r1
     d20:	2c f4       	brge	.+10     	; 0xd2c <Dio_write+0x4c>
     d22:	8d 81       	ldd	r24, Y+5	; 0x05
     d24:	9e 81       	ldd	r25, Y+6	; 0x06
     d26:	00 97       	sbiw	r24, 0x00	; 0
     d28:	71 f0       	breq	.+28     	; 0xd46 <Dio_write+0x66>
     d2a:	bc c0       	rjmp	.+376    	; 0xea4 <Dio_write+0x1c4>
     d2c:	2d 81       	ldd	r18, Y+5	; 0x05
     d2e:	3e 81       	ldd	r19, Y+6	; 0x06
     d30:	22 30       	cpi	r18, 0x02	; 2
     d32:	31 05       	cpc	r19, r1
     d34:	09 f4       	brne	.+2      	; 0xd38 <Dio_write+0x58>
     d36:	5f c0       	rjmp	.+190    	; 0xdf6 <Dio_write+0x116>
     d38:	8d 81       	ldd	r24, Y+5	; 0x05
     d3a:	9e 81       	ldd	r25, Y+6	; 0x06
     d3c:	83 30       	cpi	r24, 0x03	; 3
     d3e:	91 05       	cpc	r25, r1
     d40:	09 f4       	brne	.+2      	; 0xd44 <Dio_write+0x64>
     d42:	85 c0       	rjmp	.+266    	; 0xe4e <Dio_write+0x16e>
     d44:	af c0       	rjmp	.+350    	; 0xea4 <Dio_write+0x1c4>
	case DIO_PortA:
		if (level == High) {
     d46:	8c 81       	ldd	r24, Y+4	; 0x04
     d48:	81 30       	cpi	r24, 0x01	; 1
     d4a:	a1 f4       	brne	.+40     	; 0xd74 <Dio_write+0x94>
			SET_BIT(PORTA, pin);
     d4c:	ab e3       	ldi	r26, 0x3B	; 59
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	eb e3       	ldi	r30, 0x3B	; 59
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	48 2f       	mov	r20, r24
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	28 2f       	mov	r18, r24
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	02 2e       	mov	r0, r18
     d64:	02 c0       	rjmp	.+4      	; 0xd6a <Dio_write+0x8a>
     d66:	88 0f       	add	r24, r24
     d68:	99 1f       	adc	r25, r25
     d6a:	0a 94       	dec	r0
     d6c:	e2 f7       	brpl	.-8      	; 0xd66 <Dio_write+0x86>
     d6e:	84 2b       	or	r24, r20
     d70:	8c 93       	st	X, r24
     d72:	98 c0       	rjmp	.+304    	; 0xea4 <Dio_write+0x1c4>
		} else {
			CLR_BIT(PORTA, pin);
     d74:	ab e3       	ldi	r26, 0x3B	; 59
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	eb e3       	ldi	r30, 0x3B	; 59
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	48 2f       	mov	r20, r24
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	28 2f       	mov	r18, r24
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	02 2e       	mov	r0, r18
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <Dio_write+0xb2>
     d8e:	88 0f       	add	r24, r24
     d90:	99 1f       	adc	r25, r25
     d92:	0a 94       	dec	r0
     d94:	e2 f7       	brpl	.-8      	; 0xd8e <Dio_write+0xae>
     d96:	80 95       	com	r24
     d98:	84 23       	and	r24, r20
     d9a:	8c 93       	st	X, r24
     d9c:	83 c0       	rjmp	.+262    	; 0xea4 <Dio_write+0x1c4>
		}
		break;
	case DIO_PortB:
		if (level == High) {
     d9e:	8c 81       	ldd	r24, Y+4	; 0x04
     da0:	81 30       	cpi	r24, 0x01	; 1
     da2:	a1 f4       	brne	.+40     	; 0xdcc <Dio_write+0xec>
			SET_BIT(PORTB, pin);
     da4:	a8 e3       	ldi	r26, 0x38	; 56
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	e8 e3       	ldi	r30, 0x38	; 56
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	48 2f       	mov	r20, r24
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	28 2f       	mov	r18, r24
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	02 2e       	mov	r0, r18
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <Dio_write+0xe2>
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	0a 94       	dec	r0
     dc4:	e2 f7       	brpl	.-8      	; 0xdbe <Dio_write+0xde>
     dc6:	84 2b       	or	r24, r20
     dc8:	8c 93       	st	X, r24
     dca:	6c c0       	rjmp	.+216    	; 0xea4 <Dio_write+0x1c4>
		} else {
			CLR_BIT(PORTB, pin);
     dcc:	a8 e3       	ldi	r26, 0x38	; 56
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	e8 e3       	ldi	r30, 0x38	; 56
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	48 2f       	mov	r20, r24
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	28 2f       	mov	r18, r24
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	02 2e       	mov	r0, r18
     de4:	02 c0       	rjmp	.+4      	; 0xdea <Dio_write+0x10a>
     de6:	88 0f       	add	r24, r24
     de8:	99 1f       	adc	r25, r25
     dea:	0a 94       	dec	r0
     dec:	e2 f7       	brpl	.-8      	; 0xde6 <Dio_write+0x106>
     dee:	80 95       	com	r24
     df0:	84 23       	and	r24, r20
     df2:	8c 93       	st	X, r24
     df4:	57 c0       	rjmp	.+174    	; 0xea4 <Dio_write+0x1c4>
		}
		break;
	case DIO_PortC:
		if (level == High) {
     df6:	8c 81       	ldd	r24, Y+4	; 0x04
     df8:	81 30       	cpi	r24, 0x01	; 1
     dfa:	a1 f4       	brne	.+40     	; 0xe24 <Dio_write+0x144>
			SET_BIT(PORTC, pin);
     dfc:	a5 e3       	ldi	r26, 0x35	; 53
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	e5 e3       	ldi	r30, 0x35	; 53
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	48 2f       	mov	r20, r24
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	28 2f       	mov	r18, r24
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	02 2e       	mov	r0, r18
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <Dio_write+0x13a>
     e16:	88 0f       	add	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	0a 94       	dec	r0
     e1c:	e2 f7       	brpl	.-8      	; 0xe16 <Dio_write+0x136>
     e1e:	84 2b       	or	r24, r20
     e20:	8c 93       	st	X, r24
     e22:	40 c0       	rjmp	.+128    	; 0xea4 <Dio_write+0x1c4>
		} else {
			CLR_BIT(PORTC, pin);
     e24:	a5 e3       	ldi	r26, 0x35	; 53
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	e5 e3       	ldi	r30, 0x35	; 53
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	48 2f       	mov	r20, r24
     e30:	89 81       	ldd	r24, Y+1	; 0x01
     e32:	28 2f       	mov	r18, r24
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	02 2e       	mov	r0, r18
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <Dio_write+0x162>
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	0a 94       	dec	r0
     e44:	e2 f7       	brpl	.-8      	; 0xe3e <Dio_write+0x15e>
     e46:	80 95       	com	r24
     e48:	84 23       	and	r24, r20
     e4a:	8c 93       	st	X, r24
     e4c:	2b c0       	rjmp	.+86     	; 0xea4 <Dio_write+0x1c4>
		}
		break;
	case DIO_PortD:
		if (level == High) {
     e4e:	8c 81       	ldd	r24, Y+4	; 0x04
     e50:	81 30       	cpi	r24, 0x01	; 1
     e52:	a1 f4       	brne	.+40     	; 0xe7c <Dio_write+0x19c>
			SET_BIT(PORTD, pin);
     e54:	a2 e3       	ldi	r26, 0x32	; 50
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e2 e3       	ldi	r30, 0x32	; 50
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	48 2f       	mov	r20, r24
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	02 2e       	mov	r0, r18
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <Dio_write+0x192>
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	0a 94       	dec	r0
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <Dio_write+0x18e>
     e76:	84 2b       	or	r24, r20
     e78:	8c 93       	st	X, r24
     e7a:	14 c0       	rjmp	.+40     	; 0xea4 <Dio_write+0x1c4>
		} else {
			CLR_BIT(PORTD, pin);
     e7c:	a2 e3       	ldi	r26, 0x32	; 50
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e2 e3       	ldi	r30, 0x32	; 50
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	48 2f       	mov	r20, r24
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	02 2e       	mov	r0, r18
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <Dio_write+0x1ba>
     e96:	88 0f       	add	r24, r24
     e98:	99 1f       	adc	r25, r25
     e9a:	0a 94       	dec	r0
     e9c:	e2 f7       	brpl	.-8      	; 0xe96 <Dio_write+0x1b6>
     e9e:	80 95       	com	r24
     ea0:	84 23       	and	r24, r20
     ea2:	8c 93       	st	X, r24
		break;
	default:
		break;
	}

}
     ea4:	26 96       	adiw	r28, 0x06	; 6
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	f8 94       	cli
     eaa:	de bf       	out	0x3e, r29	; 62
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	cd bf       	out	0x3d, r28	; 61
     eb0:	cf 91       	pop	r28
     eb2:	df 91       	pop	r29
     eb4:	08 95       	ret

00000eb6 <Dio_Port_write>:

void Dio_Port_write(DIO_Port port, uint8 data) {
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	00 d0       	rcall	.+0      	; 0xebc <Dio_Port_write+0x6>
     ebc:	00 d0       	rcall	.+0      	; 0xebe <Dio_Port_write+0x8>
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
     ec2:	89 83       	std	Y+1, r24	; 0x01
     ec4:	6a 83       	std	Y+2, r22	; 0x02

	switch (port) {
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	3c 83       	std	Y+4, r19	; 0x04
     ece:	2b 83       	std	Y+3, r18	; 0x03
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	9c 81       	ldd	r25, Y+4	; 0x04
     ed4:	81 30       	cpi	r24, 0x01	; 1
     ed6:	91 05       	cpc	r25, r1
     ed8:	d1 f0       	breq	.+52     	; 0xf0e <Dio_Port_write+0x58>
     eda:	2b 81       	ldd	r18, Y+3	; 0x03
     edc:	3c 81       	ldd	r19, Y+4	; 0x04
     ede:	22 30       	cpi	r18, 0x02	; 2
     ee0:	31 05       	cpc	r19, r1
     ee2:	2c f4       	brge	.+10     	; 0xeee <Dio_Port_write+0x38>
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
     ee6:	9c 81       	ldd	r25, Y+4	; 0x04
     ee8:	00 97       	sbiw	r24, 0x00	; 0
     eea:	61 f0       	breq	.+24     	; 0xf04 <Dio_Port_write+0x4e>
     eec:	1e c0       	rjmp	.+60     	; 0xf2a <Dio_Port_write+0x74>
     eee:	2b 81       	ldd	r18, Y+3	; 0x03
     ef0:	3c 81       	ldd	r19, Y+4	; 0x04
     ef2:	22 30       	cpi	r18, 0x02	; 2
     ef4:	31 05       	cpc	r19, r1
     ef6:	81 f0       	breq	.+32     	; 0xf18 <Dio_Port_write+0x62>
     ef8:	8b 81       	ldd	r24, Y+3	; 0x03
     efa:	9c 81       	ldd	r25, Y+4	; 0x04
     efc:	83 30       	cpi	r24, 0x03	; 3
     efe:	91 05       	cpc	r25, r1
     f00:	81 f0       	breq	.+32     	; 0xf22 <Dio_Port_write+0x6c>
     f02:	13 c0       	rjmp	.+38     	; 0xf2a <Dio_Port_write+0x74>
	case DIO_PortA:
		PORTA = data;
     f04:	eb e3       	ldi	r30, 0x3B	; 59
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	8a 81       	ldd	r24, Y+2	; 0x02
     f0a:	80 83       	st	Z, r24
     f0c:	0e c0       	rjmp	.+28     	; 0xf2a <Dio_Port_write+0x74>
		break;
	case DIO_PortB:
		PORTB = data;
     f0e:	e8 e3       	ldi	r30, 0x38	; 56
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	80 83       	st	Z, r24
     f16:	09 c0       	rjmp	.+18     	; 0xf2a <Dio_Port_write+0x74>
		break;
	case DIO_PortC:
		PORTC = data;
     f18:	e5 e3       	ldi	r30, 0x35	; 53
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	80 83       	st	Z, r24
     f20:	04 c0       	rjmp	.+8      	; 0xf2a <Dio_Port_write+0x74>
		break;
	case DIO_PortD:
		PORTD = data;
     f22:	e2 e3       	ldi	r30, 0x32	; 50
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	80 83       	st	Z, r24
		break;
	default:
		break;
	}
}
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	0f 90       	pop	r0
     f30:	0f 90       	pop	r0
     f32:	cf 91       	pop	r28
     f34:	df 91       	pop	r29
     f36:	08 95       	ret

00000f38 <Dio_init>:
		{DIO_PortD, DIO_Pin2, Output},
//		{DIO_PortD, DIO_Pin4, Output},
//		{DIO_PortD, DIO_Pin5, Output}
};

void Dio_init(void){
     f38:	df 93       	push	r29
     f3a:	cf 93       	push	r28
     f3c:	00 d0       	rcall	.+0      	; 0xf3e <Dio_init+0x6>
     f3e:	00 d0       	rcall	.+0      	; 0xf40 <Dio_init+0x8>
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
	int count = sizeof(Pin_Cfgs)/ sizeof(Pin_Cfgs[0]);
     f44:	8a e0       	ldi	r24, 0x0A	; 10
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	9c 83       	std	Y+4, r25	; 0x04
     f4a:	8b 83       	std	Y+3, r24	; 0x03
	int i = 0;
     f4c:	1a 82       	std	Y+2, r1	; 0x02
     f4e:	19 82       	std	Y+1, r1	; 0x01
	for(i = 0; i < count ; i++){
     f50:	1a 82       	std	Y+2, r1	; 0x02
     f52:	19 82       	std	Y+1, r1	; 0x01
     f54:	53 c1       	rjmp	.+678    	; 0x11fc <Dio_init+0x2c4>
		if(Pin_Cfgs[i].PinPort == DIO_PortA){ //DDRA
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	9a 81       	ldd	r25, Y+2	; 0x02
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	fc 01       	movw	r30, r24
     f64:	e8 59       	subi	r30, 0x98	; 152
     f66:	ff 4f       	sbci	r31, 0xFF	; 255
     f68:	80 81       	ld	r24, Z
     f6a:	88 23       	and	r24, r24
     f6c:	09 f0       	breq	.+2      	; 0xf70 <Dio_init+0x38>
     f6e:	47 c0       	rjmp	.+142    	; 0xffe <Dio_init+0xc6>
			if(Pin_Cfgs[i].PinDir == Output){
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	9a 81       	ldd	r25, Y+2	; 0x02
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	fc 01       	movw	r30, r24
     f7e:	e6 59       	subi	r30, 0x96	; 150
     f80:	ff 4f       	sbci	r31, 0xFF	; 255
     f82:	80 81       	ld	r24, Z
     f84:	81 30       	cpi	r24, 0x01	; 1
     f86:	e9 f4       	brne	.+58     	; 0xfc2 <Dio_init+0x8a>
				SET_BIT(DDRA,Pin_Cfgs[i].Pin);
     f88:	aa e3       	ldi	r26, 0x3A	; 58
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	ea e3       	ldi	r30, 0x3A	; 58
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	48 2f       	mov	r20, r24
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	9a 81       	ldd	r25, Y+2	; 0x02
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	88 0f       	add	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	fc 01       	movw	r30, r24
     fa2:	e7 59       	subi	r30, 0x97	; 151
     fa4:	ff 4f       	sbci	r31, 0xFF	; 255
     fa6:	80 81       	ld	r24, Z
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	02 2e       	mov	r0, r18
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <Dio_init+0x80>
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	0a 94       	dec	r0
     fba:	e2 f7       	brpl	.-8      	; 0xfb4 <Dio_init+0x7c>
     fbc:	84 2b       	or	r24, r20
     fbe:	8c 93       	st	X, r24
     fc0:	18 c1       	rjmp	.+560    	; 0x11f2 <Dio_init+0x2ba>
			}
			else{
				CLR_BIT(DDRA,Pin_Cfgs[i].Pin);
     fc2:	aa e3       	ldi	r26, 0x3A	; 58
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	ea e3       	ldi	r30, 0x3A	; 58
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	48 2f       	mov	r20, r24
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	9a 81       	ldd	r25, Y+2	; 0x02
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	fc 01       	movw	r30, r24
     fdc:	e7 59       	subi	r30, 0x97	; 151
     fde:	ff 4f       	sbci	r31, 0xFF	; 255
     fe0:	80 81       	ld	r24, Z
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	02 2e       	mov	r0, r18
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <Dio_init+0xba>
     fee:	88 0f       	add	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	0a 94       	dec	r0
     ff4:	e2 f7       	brpl	.-8      	; 0xfee <Dio_init+0xb6>
     ff6:	80 95       	com	r24
     ff8:	84 23       	and	r24, r20
     ffa:	8c 93       	st	X, r24
     ffc:	fa c0       	rjmp	.+500    	; 0x11f2 <Dio_init+0x2ba>
			}
		}
		else if(Pin_Cfgs[i].PinPort == DIO_PortB){ //DDRB
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	9a 81       	ldd	r25, Y+2	; 0x02
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	fc 01       	movw	r30, r24
    100c:	e8 59       	subi	r30, 0x98	; 152
    100e:	ff 4f       	sbci	r31, 0xFF	; 255
    1010:	80 81       	ld	r24, Z
    1012:	81 30       	cpi	r24, 0x01	; 1
    1014:	09 f0       	breq	.+2      	; 0x1018 <Dio_init+0xe0>
    1016:	47 c0       	rjmp	.+142    	; 0x10a6 <Dio_init+0x16e>
			if(Pin_Cfgs[i].PinDir == Output){
    1018:	89 81       	ldd	r24, Y+1	; 0x01
    101a:	9a 81       	ldd	r25, Y+2	; 0x02
    101c:	88 0f       	add	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	fc 01       	movw	r30, r24
    1026:	e6 59       	subi	r30, 0x96	; 150
    1028:	ff 4f       	sbci	r31, 0xFF	; 255
    102a:	80 81       	ld	r24, Z
    102c:	81 30       	cpi	r24, 0x01	; 1
    102e:	e9 f4       	brne	.+58     	; 0x106a <Dio_init+0x132>
				SET_BIT(DDRB,Pin_Cfgs[i].Pin);
    1030:	a7 e3       	ldi	r26, 0x37	; 55
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e7 e3       	ldi	r30, 0x37	; 55
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	48 2f       	mov	r20, r24
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	9a 81       	ldd	r25, Y+2	; 0x02
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	fc 01       	movw	r30, r24
    104a:	e7 59       	subi	r30, 0x97	; 151
    104c:	ff 4f       	sbci	r31, 0xFF	; 255
    104e:	80 81       	ld	r24, Z
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	02 2e       	mov	r0, r18
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <Dio_init+0x128>
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	0a 94       	dec	r0
    1062:	e2 f7       	brpl	.-8      	; 0x105c <Dio_init+0x124>
    1064:	84 2b       	or	r24, r20
    1066:	8c 93       	st	X, r24
    1068:	c4 c0       	rjmp	.+392    	; 0x11f2 <Dio_init+0x2ba>
			}
			else{
				CLR_BIT(DDRB,Pin_Cfgs[i].Pin);
    106a:	a7 e3       	ldi	r26, 0x37	; 55
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	e7 e3       	ldi	r30, 0x37	; 55
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	48 2f       	mov	r20, r24
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	9a 81       	ldd	r25, Y+2	; 0x02
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	fc 01       	movw	r30, r24
    1084:	e7 59       	subi	r30, 0x97	; 151
    1086:	ff 4f       	sbci	r31, 0xFF	; 255
    1088:	80 81       	ld	r24, Z
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	02 2e       	mov	r0, r18
    1094:	02 c0       	rjmp	.+4      	; 0x109a <Dio_init+0x162>
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	0a 94       	dec	r0
    109c:	e2 f7       	brpl	.-8      	; 0x1096 <Dio_init+0x15e>
    109e:	80 95       	com	r24
    10a0:	84 23       	and	r24, r20
    10a2:	8c 93       	st	X, r24
    10a4:	a6 c0       	rjmp	.+332    	; 0x11f2 <Dio_init+0x2ba>
			}
		}
		else if(Pin_Cfgs[i].PinPort == DIO_PortC){ //DDRC
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	9a 81       	ldd	r25, Y+2	; 0x02
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	fc 01       	movw	r30, r24
    10b4:	e8 59       	subi	r30, 0x98	; 152
    10b6:	ff 4f       	sbci	r31, 0xFF	; 255
    10b8:	80 81       	ld	r24, Z
    10ba:	82 30       	cpi	r24, 0x02	; 2
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <Dio_init+0x188>
    10be:	47 c0       	rjmp	.+142    	; 0x114e <Dio_init+0x216>
			if(Pin_Cfgs[i].PinDir == Output){
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	9a 81       	ldd	r25, Y+2	; 0x02
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	fc 01       	movw	r30, r24
    10ce:	e6 59       	subi	r30, 0x96	; 150
    10d0:	ff 4f       	sbci	r31, 0xFF	; 255
    10d2:	80 81       	ld	r24, Z
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	e9 f4       	brne	.+58     	; 0x1112 <Dio_init+0x1da>
				SET_BIT(DDRC,Pin_Cfgs[i].Pin);
    10d8:	a4 e3       	ldi	r26, 0x34	; 52
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e4 e3       	ldi	r30, 0x34	; 52
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	48 2f       	mov	r20, r24
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
    10e6:	9a 81       	ldd	r25, Y+2	; 0x02
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	fc 01       	movw	r30, r24
    10f2:	e7 59       	subi	r30, 0x97	; 151
    10f4:	ff 4f       	sbci	r31, 0xFF	; 255
    10f6:	80 81       	ld	r24, Z
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	02 2e       	mov	r0, r18
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <Dio_init+0x1d0>
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	0a 94       	dec	r0
    110a:	e2 f7       	brpl	.-8      	; 0x1104 <Dio_init+0x1cc>
    110c:	84 2b       	or	r24, r20
    110e:	8c 93       	st	X, r24
    1110:	70 c0       	rjmp	.+224    	; 0x11f2 <Dio_init+0x2ba>
			}
			else{
				CLR_BIT(DDRC,Pin_Cfgs[i].Pin);
    1112:	a4 e3       	ldi	r26, 0x34	; 52
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	e4 e3       	ldi	r30, 0x34	; 52
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	48 2f       	mov	r20, r24
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	9a 81       	ldd	r25, Y+2	; 0x02
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	fc 01       	movw	r30, r24
    112c:	e7 59       	subi	r30, 0x97	; 151
    112e:	ff 4f       	sbci	r31, 0xFF	; 255
    1130:	80 81       	ld	r24, Z
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	02 2e       	mov	r0, r18
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <Dio_init+0x20a>
    113e:	88 0f       	add	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	0a 94       	dec	r0
    1144:	e2 f7       	brpl	.-8      	; 0x113e <Dio_init+0x206>
    1146:	80 95       	com	r24
    1148:	84 23       	and	r24, r20
    114a:	8c 93       	st	X, r24
    114c:	52 c0       	rjmp	.+164    	; 0x11f2 <Dio_init+0x2ba>
			}
		}
		else if(Pin_Cfgs[i].PinPort == DIO_PortD){ //DDRD
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	9a 81       	ldd	r25, Y+2	; 0x02
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	fc 01       	movw	r30, r24
    115c:	e8 59       	subi	r30, 0x98	; 152
    115e:	ff 4f       	sbci	r31, 0xFF	; 255
    1160:	80 81       	ld	r24, Z
    1162:	83 30       	cpi	r24, 0x03	; 3
    1164:	09 f0       	breq	.+2      	; 0x1168 <Dio_init+0x230>
    1166:	45 c0       	rjmp	.+138    	; 0x11f2 <Dio_init+0x2ba>
			if(Pin_Cfgs[i].PinDir == Output){
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	9a 81       	ldd	r25, Y+2	; 0x02
    116c:	88 0f       	add	r24, r24
    116e:	99 1f       	adc	r25, r25
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	fc 01       	movw	r30, r24
    1176:	e6 59       	subi	r30, 0x96	; 150
    1178:	ff 4f       	sbci	r31, 0xFF	; 255
    117a:	80 81       	ld	r24, Z
    117c:	81 30       	cpi	r24, 0x01	; 1
    117e:	e9 f4       	brne	.+58     	; 0x11ba <Dio_init+0x282>
				SET_BIT(DDRD,Pin_Cfgs[i].Pin);
    1180:	a1 e3       	ldi	r26, 0x31	; 49
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e1 e3       	ldi	r30, 0x31	; 49
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	48 2f       	mov	r20, r24
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	9a 81       	ldd	r25, Y+2	; 0x02
    1190:	88 0f       	add	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	fc 01       	movw	r30, r24
    119a:	e7 59       	subi	r30, 0x97	; 151
    119c:	ff 4f       	sbci	r31, 0xFF	; 255
    119e:	80 81       	ld	r24, Z
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	02 2e       	mov	r0, r18
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <Dio_init+0x278>
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	0a 94       	dec	r0
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <Dio_init+0x274>
    11b4:	84 2b       	or	r24, r20
    11b6:	8c 93       	st	X, r24
    11b8:	1c c0       	rjmp	.+56     	; 0x11f2 <Dio_init+0x2ba>
			}
			else{
				CLR_BIT(DDRD,Pin_Cfgs[i].Pin);
    11ba:	a1 e3       	ldi	r26, 0x31	; 49
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e1 e3       	ldi	r30, 0x31	; 49
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	48 2f       	mov	r20, r24
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	88 0f       	add	r24, r24
    11d0:	99 1f       	adc	r25, r25
    11d2:	fc 01       	movw	r30, r24
    11d4:	e7 59       	subi	r30, 0x97	; 151
    11d6:	ff 4f       	sbci	r31, 0xFF	; 255
    11d8:	80 81       	ld	r24, Z
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <Dio_init+0x2b0>
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	2a 95       	dec	r18
    11ea:	e2 f7       	brpl	.-8      	; 0x11e4 <Dio_init+0x2ac>
    11ec:	80 95       	com	r24
    11ee:	84 23       	and	r24, r20
    11f0:	8c 93       	st	X, r24
};

void Dio_init(void){
	int count = sizeof(Pin_Cfgs)/ sizeof(Pin_Cfgs[0]);
	int i = 0;
	for(i = 0; i < count ; i++){
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	9a 81       	ldd	r25, Y+2	; 0x02
    11f6:	01 96       	adiw	r24, 0x01	; 1
    11f8:	9a 83       	std	Y+2, r25	; 0x02
    11fa:	89 83       	std	Y+1, r24	; 0x01
    11fc:	29 81       	ldd	r18, Y+1	; 0x01
    11fe:	3a 81       	ldd	r19, Y+2	; 0x02
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	9c 81       	ldd	r25, Y+4	; 0x04
    1204:	28 17       	cp	r18, r24
    1206:	39 07       	cpc	r19, r25
    1208:	0c f4       	brge	.+2      	; 0x120c <Dio_init+0x2d4>
    120a:	a5 ce       	rjmp	.-694    	; 0xf56 <Dio_init+0x1e>
			else{
				CLR_BIT(DDRD,Pin_Cfgs[i].Pin);
			}
		}
	}
}
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	08 95       	ret

0000121a <UART_init>:
 */


#include "uart.h"
void UART_init(unsigned int baud)
{
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	00 d0       	rcall	.+0      	; 0x1220 <UART_init+0x6>
    1220:	cd b7       	in	r28, 0x3d	; 61
    1222:	de b7       	in	r29, 0x3e	; 62
    1224:	9a 83       	std	Y+2, r25	; 0x02
    1226:	89 83       	std	Y+1, r24	; 0x01
	/* Set baud rate */
	UBRRH = (unsigned char)(baud>>8);
    1228:	e0 e4       	ldi	r30, 0x40	; 64
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	89 81       	ldd	r24, Y+1	; 0x01
    122e:	9a 81       	ldd	r25, Y+2	; 0x02
    1230:	89 2f       	mov	r24, r25
    1232:	99 27       	eor	r25, r25
    1234:	80 83       	st	Z, r24
	UBRRL = (unsigned char)baud;
    1236:	e9 e2       	ldi	r30, 0x29	; 41
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	89 81       	ldd	r24, Y+1	; 0x01
    123c:	80 83       	st	Z, r24
	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN);
    123e:	ea e2       	ldi	r30, 0x2A	; 42
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	88 e1       	ldi	r24, 0x18	; 24
    1244:	80 83       	st	Z, r24
	/* Set frame format: 8data, 2stop bit */
	UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
    1246:	e0 e4       	ldi	r30, 0x40	; 64
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	8e e8       	ldi	r24, 0x8E	; 142
    124c:	80 83       	st	Z, r24
}
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	cf 91       	pop	r28
    1254:	df 91       	pop	r29
    1256:	08 95       	ret

00001258 <UART_send>:
void UART_send(unsigned char data)
{
    1258:	df 93       	push	r29
    125a:	cf 93       	push	r28
    125c:	0f 92       	push	r0
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
    1262:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSRA&(1<<UDRE)))
    1264:	eb e2       	ldi	r30, 0x2B	; 43
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	88 2f       	mov	r24, r24
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	80 72       	andi	r24, 0x20	; 32
    1270:	90 70       	andi	r25, 0x00	; 0
    1272:	00 97       	sbiw	r24, 0x00	; 0
    1274:	b9 f3       	breq	.-18     	; 0x1264 <UART_send+0xc>
	{
	}

	UDR=data;
    1276:	ec e2       	ldi	r30, 0x2C	; 44
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	89 81       	ldd	r24, Y+1	; 0x01
    127c:	80 83       	st	Z, r24
}
    127e:	0f 90       	pop	r0
    1280:	cf 91       	pop	r28
    1282:	df 91       	pop	r29
    1284:	08 95       	ret

00001286 <UART_recieve>:
unsigned char UART_recieve()
{
    1286:	df 93       	push	r29
    1288:	cf 93       	push	r28
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
	while (!(UCSRA&(1<<RXC)))
    128e:	eb e2       	ldi	r30, 0x2B	; 43
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	88 23       	and	r24, r24
    1296:	dc f7       	brge	.-10     	; 0x128e <UART_recieve+0x8>
	{
	}
	return UDR;
    1298:	ec e2       	ldi	r30, 0x2C	; 44
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
}
    129e:	cf 91       	pop	r28
    12a0:	df 91       	pop	r29
    12a2:	08 95       	ret

000012a4 <lcd_init>:
 *  Created on: Jul 31, 2021
 *      Author: Mohamed Abdulaal
 */
#include "lcd.h"

void lcd_init(){
    12a4:	df 93       	push	r29
    12a6:	cf 93       	push	r28
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	2e 97       	sbiw	r28, 0x0e	; 14
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	f8 94       	cli
    12b2:	de bf       	out	0x3e, r29	; 62
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	cd bf       	out	0x3d, r28	; 61
	Dio_write(RW,Low);
    12b8:	8a e0       	ldi	r24, 0x0A	; 10
    12ba:	60 e0       	ldi	r22, 0x00	; 0
    12bc:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	a0 ea       	ldi	r26, 0xA0	; 160
    12c6:	b1 e4       	ldi	r27, 0x41	; 65
    12c8:	8b 87       	std	Y+11, r24	; 0x0b
    12ca:	9c 87       	std	Y+12, r25	; 0x0c
    12cc:	ad 87       	std	Y+13, r26	; 0x0d
    12ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    12d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    12d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    12d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    12d8:	20 e0       	ldi	r18, 0x00	; 0
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	4a e7       	ldi	r20, 0x7A	; 122
    12de:	55 e4       	ldi	r21, 0x45	; 69
    12e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12e4:	dc 01       	movw	r26, r24
    12e6:	cb 01       	movw	r24, r22
    12e8:	8f 83       	std	Y+7, r24	; 0x07
    12ea:	98 87       	std	Y+8, r25	; 0x08
    12ec:	a9 87       	std	Y+9, r26	; 0x09
    12ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12f0:	6f 81       	ldd	r22, Y+7	; 0x07
    12f2:	78 85       	ldd	r23, Y+8	; 0x08
    12f4:	89 85       	ldd	r24, Y+9	; 0x09
    12f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	40 e8       	ldi	r20, 0x80	; 128
    12fe:	5f e3       	ldi	r21, 0x3F	; 63
    1300:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1304:	88 23       	and	r24, r24
    1306:	2c f4       	brge	.+10     	; 0x1312 <lcd_init+0x6e>
		__ticks = 1;
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	9e 83       	std	Y+6, r25	; 0x06
    130e:	8d 83       	std	Y+5, r24	; 0x05
    1310:	3f c0       	rjmp	.+126    	; 0x1390 <lcd_init+0xec>
	else if (__tmp > 65535)
    1312:	6f 81       	ldd	r22, Y+7	; 0x07
    1314:	78 85       	ldd	r23, Y+8	; 0x08
    1316:	89 85       	ldd	r24, Y+9	; 0x09
    1318:	9a 85       	ldd	r25, Y+10	; 0x0a
    131a:	20 e0       	ldi	r18, 0x00	; 0
    131c:	3f ef       	ldi	r19, 0xFF	; 255
    131e:	4f e7       	ldi	r20, 0x7F	; 127
    1320:	57 e4       	ldi	r21, 0x47	; 71
    1322:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1326:	18 16       	cp	r1, r24
    1328:	4c f5       	brge	.+82     	; 0x137c <lcd_init+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    132a:	6b 85       	ldd	r22, Y+11	; 0x0b
    132c:	7c 85       	ldd	r23, Y+12	; 0x0c
    132e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1330:	9e 85       	ldd	r25, Y+14	; 0x0e
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	40 e2       	ldi	r20, 0x20	; 32
    1338:	51 e4       	ldi	r21, 0x41	; 65
    133a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    133e:	dc 01       	movw	r26, r24
    1340:	cb 01       	movw	r24, r22
    1342:	bc 01       	movw	r22, r24
    1344:	cd 01       	movw	r24, r26
    1346:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    134a:	dc 01       	movw	r26, r24
    134c:	cb 01       	movw	r24, r22
    134e:	9e 83       	std	Y+6, r25	; 0x06
    1350:	8d 83       	std	Y+5, r24	; 0x05
    1352:	0f c0       	rjmp	.+30     	; 0x1372 <lcd_init+0xce>
    1354:	80 e9       	ldi	r24, 0x90	; 144
    1356:	91 e0       	ldi	r25, 0x01	; 1
    1358:	9c 83       	std	Y+4, r25	; 0x04
    135a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	9c 81       	ldd	r25, Y+4	; 0x04
    1360:	01 97       	sbiw	r24, 0x01	; 1
    1362:	f1 f7       	brne	.-4      	; 0x1360 <lcd_init+0xbc>
    1364:	9c 83       	std	Y+4, r25	; 0x04
    1366:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1368:	8d 81       	ldd	r24, Y+5	; 0x05
    136a:	9e 81       	ldd	r25, Y+6	; 0x06
    136c:	01 97       	sbiw	r24, 0x01	; 1
    136e:	9e 83       	std	Y+6, r25	; 0x06
    1370:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1372:	8d 81       	ldd	r24, Y+5	; 0x05
    1374:	9e 81       	ldd	r25, Y+6	; 0x06
    1376:	00 97       	sbiw	r24, 0x00	; 0
    1378:	69 f7       	brne	.-38     	; 0x1354 <lcd_init+0xb0>
    137a:	14 c0       	rjmp	.+40     	; 0x13a4 <lcd_init+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    137c:	6f 81       	ldd	r22, Y+7	; 0x07
    137e:	78 85       	ldd	r23, Y+8	; 0x08
    1380:	89 85       	ldd	r24, Y+9	; 0x09
    1382:	9a 85       	ldd	r25, Y+10	; 0x0a
    1384:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1388:	dc 01       	movw	r26, r24
    138a:	cb 01       	movw	r24, r22
    138c:	9e 83       	std	Y+6, r25	; 0x06
    138e:	8d 83       	std	Y+5, r24	; 0x05
    1390:	8d 81       	ldd	r24, Y+5	; 0x05
    1392:	9e 81       	ldd	r25, Y+6	; 0x06
    1394:	9a 83       	std	Y+2, r25	; 0x02
    1396:	89 83       	std	Y+1, r24	; 0x01
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	9a 81       	ldd	r25, Y+2	; 0x02
    139c:	01 97       	sbiw	r24, 0x01	; 1
    139e:	f1 f7       	brne	.-4      	; 0x139c <lcd_init+0xf8>
    13a0:	9a 83       	std	Y+2, r25	; 0x02
    13a2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);		// LCD Power ON delay

	lcd_cmd(0x33);
    13a4:	83 e3       	ldi	r24, 0x33	; 51
    13a6:	0e 94 ed 09 	call	0x13da	; 0x13da <lcd_cmd>
	lcd_cmd(0x32); /* Send for 4 bit initialization of LCD  */
    13aa:	82 e3       	ldi	r24, 0x32	; 50
    13ac:	0e 94 ed 09 	call	0x13da	; 0x13da <lcd_cmd>
	lcd_cmd(0x28); // Select 4 Bit Mode, 5*7 dots
    13b0:	88 e2       	ldi	r24, 0x28	; 40
    13b2:	0e 94 ed 09 	call	0x13da	; 0x13da <lcd_cmd>
	lcd_cmd(0x0F);	// Display On, Cursor Blinking
    13b6:	8f e0       	ldi	r24, 0x0F	; 15
    13b8:	0e 94 ed 09 	call	0x13da	; 0x13da <lcd_cmd>
	lcd_cmd(0x06);	// Entry Mode Increment cursor to right
    13bc:	86 e0       	ldi	r24, 0x06	; 6
    13be:	0e 94 ed 09 	call	0x13da	; 0x13da <lcd_cmd>
	lcd_cmd(0x01);	// Clear Display
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	0e 94 ed 09 	call	0x13da	; 0x13da <lcd_cmd>
//	LCD_Command(0x28);	/* 2 line, 5*7 matrix in 4-bit mode */
//	LCD_Command(0x0c);	/* Display on cursor off */
//	LCD_Command(0x06);	/* Increment cursor (shift cursor to right) */
//	LCD_Command(0x01);	/* Clear display screen */

}
    13c8:	2e 96       	adiw	r28, 0x0e	; 14
    13ca:	0f b6       	in	r0, 0x3f	; 63
    13cc:	f8 94       	cli
    13ce:	de bf       	out	0x3e, r29	; 62
    13d0:	0f be       	out	0x3f, r0	; 63
    13d2:	cd bf       	out	0x3d, r28	; 61
    13d4:	cf 91       	pop	r28
    13d6:	df 91       	pop	r29
    13d8:	08 95       	ret

000013da <lcd_cmd>:

void lcd_cmd(uint8 cmd){
    13da:	0f 93       	push	r16
    13dc:	1f 93       	push	r17
    13de:	df 93       	push	r29
    13e0:	cf 93       	push	r28
    13e2:	cd b7       	in	r28, 0x3d	; 61
    13e4:	de b7       	in	r29, 0x3e	; 62
    13e6:	c1 56       	subi	r28, 0x61	; 97
    13e8:	d0 40       	sbci	r29, 0x00	; 0
    13ea:	0f b6       	in	r0, 0x3f	; 63
    13ec:	f8 94       	cli
    13ee:	de bf       	out	0x3e, r29	; 62
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	cd bf       	out	0x3d, r28	; 61
    13f4:	fe 01       	movw	r30, r28
    13f6:	ef 59       	subi	r30, 0x9F	; 159
    13f8:	ff 4f       	sbci	r31, 0xFF	; 255
    13fa:	80 83       	st	Z, r24
	Dio_write(RS, Low);
    13fc:	89 e0       	ldi	r24, 0x09	; 9
    13fe:	60 e0       	ldi	r22, 0x00	; 0
    1400:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
	Dio_write(RW, Low);
    1404:	8a e0       	ldi	r24, 0x0A	; 10
    1406:	60 e0       	ldi	r22, 0x00	; 0
    1408:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>

	if(GET_BIT(cmd,7)){ Dio_write(D7,High);}else{ Dio_write(D7,Low);}
    140c:	fe 01       	movw	r30, r28
    140e:	ef 59       	subi	r30, 0x9F	; 159
    1410:	ff 4f       	sbci	r31, 0xFF	; 255
    1412:	80 81       	ld	r24, Z
    1414:	88 23       	and	r24, r24
    1416:	2c f4       	brge	.+10     	; 0x1422 <lcd_cmd+0x48>
    1418:	87 e0       	ldi	r24, 0x07	; 7
    141a:	61 e0       	ldi	r22, 0x01	; 1
    141c:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
    1420:	04 c0       	rjmp	.+8      	; 0x142a <lcd_cmd+0x50>
    1422:	87 e0       	ldi	r24, 0x07	; 7
    1424:	60 e0       	ldi	r22, 0x00	; 0
    1426:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
	if(GET_BIT(cmd,6)){ Dio_write(D6,High);}else{ Dio_write(D6,Low);}
    142a:	fe 01       	movw	r30, r28
    142c:	ef 59       	subi	r30, 0x9F	; 159
    142e:	ff 4f       	sbci	r31, 0xFF	; 255
    1430:	80 81       	ld	r24, Z
    1432:	88 2f       	mov	r24, r24
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	80 74       	andi	r24, 0x40	; 64
    1438:	90 70       	andi	r25, 0x00	; 0
    143a:	00 97       	sbiw	r24, 0x00	; 0
    143c:	29 f0       	breq	.+10     	; 0x1448 <lcd_cmd+0x6e>
    143e:	86 e0       	ldi	r24, 0x06	; 6
    1440:	61 e0       	ldi	r22, 0x01	; 1
    1442:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
    1446:	04 c0       	rjmp	.+8      	; 0x1450 <lcd_cmd+0x76>
    1448:	86 e0       	ldi	r24, 0x06	; 6
    144a:	60 e0       	ldi	r22, 0x00	; 0
    144c:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
	if(GET_BIT(cmd,5)){ Dio_write(D5,High);}else{ Dio_write(D5,Low);}
    1450:	fe 01       	movw	r30, r28
    1452:	ef 59       	subi	r30, 0x9F	; 159
    1454:	ff 4f       	sbci	r31, 0xFF	; 255
    1456:	80 81       	ld	r24, Z
    1458:	88 2f       	mov	r24, r24
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	80 72       	andi	r24, 0x20	; 32
    145e:	90 70       	andi	r25, 0x00	; 0
    1460:	00 97       	sbiw	r24, 0x00	; 0
    1462:	29 f0       	breq	.+10     	; 0x146e <lcd_cmd+0x94>
    1464:	85 e0       	ldi	r24, 0x05	; 5
    1466:	61 e0       	ldi	r22, 0x01	; 1
    1468:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
    146c:	04 c0       	rjmp	.+8      	; 0x1476 <lcd_cmd+0x9c>
    146e:	85 e0       	ldi	r24, 0x05	; 5
    1470:	60 e0       	ldi	r22, 0x00	; 0
    1472:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
	if(GET_BIT(cmd,4)){ Dio_write(D4,High);}else{ Dio_write(D4,Low);}
    1476:	fe 01       	movw	r30, r28
    1478:	ef 59       	subi	r30, 0x9F	; 159
    147a:	ff 4f       	sbci	r31, 0xFF	; 255
    147c:	80 81       	ld	r24, Z
    147e:	88 2f       	mov	r24, r24
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	80 71       	andi	r24, 0x10	; 16
    1484:	90 70       	andi	r25, 0x00	; 0
    1486:	00 97       	sbiw	r24, 0x00	; 0
    1488:	29 f0       	breq	.+10     	; 0x1494 <lcd_cmd+0xba>
    148a:	84 e0       	ldi	r24, 0x04	; 4
    148c:	61 e0       	ldi	r22, 0x01	; 1
    148e:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
    1492:	04 c0       	rjmp	.+8      	; 0x149c <lcd_cmd+0xc2>
    1494:	84 e0       	ldi	r24, 0x04	; 4
    1496:	60 e0       	ldi	r22, 0x00	; 0
    1498:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
	Dio_write(E,High);
    149c:	8b e0       	ldi	r24, 0x0B	; 11
    149e:	61 e0       	ldi	r22, 0x01	; 1
    14a0:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
    14a4:	fe 01       	movw	r30, r28
    14a6:	e3 5a       	subi	r30, 0xA3	; 163
    14a8:	ff 4f       	sbci	r31, 0xFF	; 255
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	a0 e2       	ldi	r26, 0x20	; 32
    14b0:	b1 e4       	ldi	r27, 0x41	; 65
    14b2:	80 83       	st	Z, r24
    14b4:	91 83       	std	Z+1, r25	; 0x01
    14b6:	a2 83       	std	Z+2, r26	; 0x02
    14b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    14ba:	8e 01       	movw	r16, r28
    14bc:	07 5a       	subi	r16, 0xA7	; 167
    14be:	1f 4f       	sbci	r17, 0xFF	; 255
    14c0:	fe 01       	movw	r30, r28
    14c2:	e3 5a       	subi	r30, 0xA3	; 163
    14c4:	ff 4f       	sbci	r31, 0xFF	; 255
    14c6:	60 81       	ld	r22, Z
    14c8:	71 81       	ldd	r23, Z+1	; 0x01
    14ca:	82 81       	ldd	r24, Z+2	; 0x02
    14cc:	93 81       	ldd	r25, Z+3	; 0x03
    14ce:	2b ea       	ldi	r18, 0xAB	; 171
    14d0:	3a ea       	ldi	r19, 0xAA	; 170
    14d2:	4a ea       	ldi	r20, 0xAA	; 170
    14d4:	50 e4       	ldi	r21, 0x40	; 64
    14d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14da:	dc 01       	movw	r26, r24
    14dc:	cb 01       	movw	r24, r22
    14de:	f8 01       	movw	r30, r16
    14e0:	80 83       	st	Z, r24
    14e2:	91 83       	std	Z+1, r25	; 0x01
    14e4:	a2 83       	std	Z+2, r26	; 0x02
    14e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14e8:	fe 01       	movw	r30, r28
    14ea:	e7 5a       	subi	r30, 0xA7	; 167
    14ec:	ff 4f       	sbci	r31, 0xFF	; 255
    14ee:	60 81       	ld	r22, Z
    14f0:	71 81       	ldd	r23, Z+1	; 0x01
    14f2:	82 81       	ldd	r24, Z+2	; 0x02
    14f4:	93 81       	ldd	r25, Z+3	; 0x03
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	40 e8       	ldi	r20, 0x80	; 128
    14fc:	5f e3       	ldi	r21, 0x3F	; 63
    14fe:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1502:	88 23       	and	r24, r24
    1504:	34 f4       	brge	.+12     	; 0x1512 <lcd_cmd+0x138>
		__ticks = 1;
    1506:	fe 01       	movw	r30, r28
    1508:	e8 5a       	subi	r30, 0xA8	; 168
    150a:	ff 4f       	sbci	r31, 0xFF	; 255
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	80 83       	st	Z, r24
    1510:	e0 c0       	rjmp	.+448    	; 0x16d2 <lcd_cmd+0x2f8>
	else if (__tmp > 255)
    1512:	fe 01       	movw	r30, r28
    1514:	e7 5a       	subi	r30, 0xA7	; 167
    1516:	ff 4f       	sbci	r31, 0xFF	; 255
    1518:	60 81       	ld	r22, Z
    151a:	71 81       	ldd	r23, Z+1	; 0x01
    151c:	82 81       	ldd	r24, Z+2	; 0x02
    151e:	93 81       	ldd	r25, Z+3	; 0x03
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	4f e7       	ldi	r20, 0x7F	; 127
    1526:	53 e4       	ldi	r21, 0x43	; 67
    1528:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    152c:	18 16       	cp	r1, r24
    152e:	0c f0       	brlt	.+2      	; 0x1532 <lcd_cmd+0x158>
    1530:	c0 c0       	rjmp	.+384    	; 0x16b2 <lcd_cmd+0x2d8>
	{
		_delay_ms(__us / 1000.0);
    1532:	fe 01       	movw	r30, r28
    1534:	e3 5a       	subi	r30, 0xA3	; 163
    1536:	ff 4f       	sbci	r31, 0xFF	; 255
    1538:	60 81       	ld	r22, Z
    153a:	71 81       	ldd	r23, Z+1	; 0x01
    153c:	82 81       	ldd	r24, Z+2	; 0x02
    153e:	93 81       	ldd	r25, Z+3	; 0x03
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	4a e7       	ldi	r20, 0x7A	; 122
    1546:	54 e4       	ldi	r21, 0x44	; 68
    1548:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	fe 01       	movw	r30, r28
    1552:	ec 5a       	subi	r30, 0xAC	; 172
    1554:	ff 4f       	sbci	r31, 0xFF	; 255
    1556:	80 83       	st	Z, r24
    1558:	91 83       	std	Z+1, r25	; 0x01
    155a:	a2 83       	std	Z+2, r26	; 0x02
    155c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    155e:	8e 01       	movw	r16, r28
    1560:	00 5b       	subi	r16, 0xB0	; 176
    1562:	1f 4f       	sbci	r17, 0xFF	; 255
    1564:	fe 01       	movw	r30, r28
    1566:	ec 5a       	subi	r30, 0xAC	; 172
    1568:	ff 4f       	sbci	r31, 0xFF	; 255
    156a:	60 81       	ld	r22, Z
    156c:	71 81       	ldd	r23, Z+1	; 0x01
    156e:	82 81       	ldd	r24, Z+2	; 0x02
    1570:	93 81       	ldd	r25, Z+3	; 0x03
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	4a e7       	ldi	r20, 0x7A	; 122
    1578:	55 e4       	ldi	r21, 0x45	; 69
    157a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    157e:	dc 01       	movw	r26, r24
    1580:	cb 01       	movw	r24, r22
    1582:	f8 01       	movw	r30, r16
    1584:	80 83       	st	Z, r24
    1586:	91 83       	std	Z+1, r25	; 0x01
    1588:	a2 83       	std	Z+2, r26	; 0x02
    158a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    158c:	fe 01       	movw	r30, r28
    158e:	e0 5b       	subi	r30, 0xB0	; 176
    1590:	ff 4f       	sbci	r31, 0xFF	; 255
    1592:	60 81       	ld	r22, Z
    1594:	71 81       	ldd	r23, Z+1	; 0x01
    1596:	82 81       	ldd	r24, Z+2	; 0x02
    1598:	93 81       	ldd	r25, Z+3	; 0x03
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	40 e8       	ldi	r20, 0x80	; 128
    15a0:	5f e3       	ldi	r21, 0x3F	; 63
    15a2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15a6:	88 23       	and	r24, r24
    15a8:	44 f4       	brge	.+16     	; 0x15ba <lcd_cmd+0x1e0>
		__ticks = 1;
    15aa:	fe 01       	movw	r30, r28
    15ac:	e2 5b       	subi	r30, 0xB2	; 178
    15ae:	ff 4f       	sbci	r31, 0xFF	; 255
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	91 83       	std	Z+1, r25	; 0x01
    15b6:	80 83       	st	Z, r24
    15b8:	64 c0       	rjmp	.+200    	; 0x1682 <lcd_cmd+0x2a8>
	else if (__tmp > 65535)
    15ba:	fe 01       	movw	r30, r28
    15bc:	e0 5b       	subi	r30, 0xB0	; 176
    15be:	ff 4f       	sbci	r31, 0xFF	; 255
    15c0:	60 81       	ld	r22, Z
    15c2:	71 81       	ldd	r23, Z+1	; 0x01
    15c4:	82 81       	ldd	r24, Z+2	; 0x02
    15c6:	93 81       	ldd	r25, Z+3	; 0x03
    15c8:	20 e0       	ldi	r18, 0x00	; 0
    15ca:	3f ef       	ldi	r19, 0xFF	; 255
    15cc:	4f e7       	ldi	r20, 0x7F	; 127
    15ce:	57 e4       	ldi	r21, 0x47	; 71
    15d0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    15d4:	18 16       	cp	r1, r24
    15d6:	0c f0       	brlt	.+2      	; 0x15da <lcd_cmd+0x200>
    15d8:	43 c0       	rjmp	.+134    	; 0x1660 <lcd_cmd+0x286>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15da:	fe 01       	movw	r30, r28
    15dc:	ec 5a       	subi	r30, 0xAC	; 172
    15de:	ff 4f       	sbci	r31, 0xFF	; 255
    15e0:	60 81       	ld	r22, Z
    15e2:	71 81       	ldd	r23, Z+1	; 0x01
    15e4:	82 81       	ldd	r24, Z+2	; 0x02
    15e6:	93 81       	ldd	r25, Z+3	; 0x03
    15e8:	20 e0       	ldi	r18, 0x00	; 0
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	40 e2       	ldi	r20, 0x20	; 32
    15ee:	51 e4       	ldi	r21, 0x41	; 65
    15f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15f4:	dc 01       	movw	r26, r24
    15f6:	cb 01       	movw	r24, r22
    15f8:	8e 01       	movw	r16, r28
    15fa:	02 5b       	subi	r16, 0xB2	; 178
    15fc:	1f 4f       	sbci	r17, 0xFF	; 255
    15fe:	bc 01       	movw	r22, r24
    1600:	cd 01       	movw	r24, r26
    1602:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	f8 01       	movw	r30, r16
    160c:	91 83       	std	Z+1, r25	; 0x01
    160e:	80 83       	st	Z, r24
    1610:	1f c0       	rjmp	.+62     	; 0x1650 <lcd_cmd+0x276>
    1612:	fe 01       	movw	r30, r28
    1614:	e4 5b       	subi	r30, 0xB4	; 180
    1616:	ff 4f       	sbci	r31, 0xFF	; 255
    1618:	80 e9       	ldi	r24, 0x90	; 144
    161a:	91 e0       	ldi	r25, 0x01	; 1
    161c:	91 83       	std	Z+1, r25	; 0x01
    161e:	80 83       	st	Z, r24
    1620:	fe 01       	movw	r30, r28
    1622:	e4 5b       	subi	r30, 0xB4	; 180
    1624:	ff 4f       	sbci	r31, 0xFF	; 255
    1626:	80 81       	ld	r24, Z
    1628:	91 81       	ldd	r25, Z+1	; 0x01
    162a:	01 97       	sbiw	r24, 0x01	; 1
    162c:	f1 f7       	brne	.-4      	; 0x162a <lcd_cmd+0x250>
    162e:	fe 01       	movw	r30, r28
    1630:	e4 5b       	subi	r30, 0xB4	; 180
    1632:	ff 4f       	sbci	r31, 0xFF	; 255
    1634:	91 83       	std	Z+1, r25	; 0x01
    1636:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1638:	de 01       	movw	r26, r28
    163a:	a2 5b       	subi	r26, 0xB2	; 178
    163c:	bf 4f       	sbci	r27, 0xFF	; 255
    163e:	fe 01       	movw	r30, r28
    1640:	e2 5b       	subi	r30, 0xB2	; 178
    1642:	ff 4f       	sbci	r31, 0xFF	; 255
    1644:	80 81       	ld	r24, Z
    1646:	91 81       	ldd	r25, Z+1	; 0x01
    1648:	01 97       	sbiw	r24, 0x01	; 1
    164a:	11 96       	adiw	r26, 0x01	; 1
    164c:	9c 93       	st	X, r25
    164e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1650:	fe 01       	movw	r30, r28
    1652:	e2 5b       	subi	r30, 0xB2	; 178
    1654:	ff 4f       	sbci	r31, 0xFF	; 255
    1656:	80 81       	ld	r24, Z
    1658:	91 81       	ldd	r25, Z+1	; 0x01
    165a:	00 97       	sbiw	r24, 0x00	; 0
    165c:	d1 f6       	brne	.-76     	; 0x1612 <lcd_cmd+0x238>
    165e:	4b c0       	rjmp	.+150    	; 0x16f6 <lcd_cmd+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1660:	8e 01       	movw	r16, r28
    1662:	02 5b       	subi	r16, 0xB2	; 178
    1664:	1f 4f       	sbci	r17, 0xFF	; 255
    1666:	fe 01       	movw	r30, r28
    1668:	e0 5b       	subi	r30, 0xB0	; 176
    166a:	ff 4f       	sbci	r31, 0xFF	; 255
    166c:	60 81       	ld	r22, Z
    166e:	71 81       	ldd	r23, Z+1	; 0x01
    1670:	82 81       	ldd	r24, Z+2	; 0x02
    1672:	93 81       	ldd	r25, Z+3	; 0x03
    1674:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1678:	dc 01       	movw	r26, r24
    167a:	cb 01       	movw	r24, r22
    167c:	f8 01       	movw	r30, r16
    167e:	91 83       	std	Z+1, r25	; 0x01
    1680:	80 83       	st	Z, r24
    1682:	de 01       	movw	r26, r28
    1684:	a6 5b       	subi	r26, 0xB6	; 182
    1686:	bf 4f       	sbci	r27, 0xFF	; 255
    1688:	fe 01       	movw	r30, r28
    168a:	e2 5b       	subi	r30, 0xB2	; 178
    168c:	ff 4f       	sbci	r31, 0xFF	; 255
    168e:	80 81       	ld	r24, Z
    1690:	91 81       	ldd	r25, Z+1	; 0x01
    1692:	11 96       	adiw	r26, 0x01	; 1
    1694:	9c 93       	st	X, r25
    1696:	8e 93       	st	-X, r24
    1698:	fe 01       	movw	r30, r28
    169a:	e6 5b       	subi	r30, 0xB6	; 182
    169c:	ff 4f       	sbci	r31, 0xFF	; 255
    169e:	80 81       	ld	r24, Z
    16a0:	91 81       	ldd	r25, Z+1	; 0x01
    16a2:	01 97       	sbiw	r24, 0x01	; 1
    16a4:	f1 f7       	brne	.-4      	; 0x16a2 <lcd_cmd+0x2c8>
    16a6:	fe 01       	movw	r30, r28
    16a8:	e6 5b       	subi	r30, 0xB6	; 182
    16aa:	ff 4f       	sbci	r31, 0xFF	; 255
    16ac:	91 83       	std	Z+1, r25	; 0x01
    16ae:	80 83       	st	Z, r24
    16b0:	22 c0       	rjmp	.+68     	; 0x16f6 <lcd_cmd+0x31c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    16b2:	8e 01       	movw	r16, r28
    16b4:	08 5a       	subi	r16, 0xA8	; 168
    16b6:	1f 4f       	sbci	r17, 0xFF	; 255
    16b8:	fe 01       	movw	r30, r28
    16ba:	e7 5a       	subi	r30, 0xA7	; 167
    16bc:	ff 4f       	sbci	r31, 0xFF	; 255
    16be:	60 81       	ld	r22, Z
    16c0:	71 81       	ldd	r23, Z+1	; 0x01
    16c2:	82 81       	ldd	r24, Z+2	; 0x02
    16c4:	93 81       	ldd	r25, Z+3	; 0x03
    16c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16ca:	dc 01       	movw	r26, r24
    16cc:	cb 01       	movw	r24, r22
    16ce:	f8 01       	movw	r30, r16
    16d0:	80 83       	st	Z, r24
    16d2:	de 01       	movw	r26, r28
    16d4:	a7 5b       	subi	r26, 0xB7	; 183
    16d6:	bf 4f       	sbci	r27, 0xFF	; 255
    16d8:	fe 01       	movw	r30, r28
    16da:	e8 5a       	subi	r30, 0xA8	; 168
    16dc:	ff 4f       	sbci	r31, 0xFF	; 255
    16de:	80 81       	ld	r24, Z
    16e0:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    16e2:	fe 01       	movw	r30, r28
    16e4:	e7 5b       	subi	r30, 0xB7	; 183
    16e6:	ff 4f       	sbci	r31, 0xFF	; 255
    16e8:	80 81       	ld	r24, Z
    16ea:	8a 95       	dec	r24
    16ec:	f1 f7       	brne	.-4      	; 0x16ea <lcd_cmd+0x310>
    16ee:	fe 01       	movw	r30, r28
    16f0:	e7 5b       	subi	r30, 0xB7	; 183
    16f2:	ff 4f       	sbci	r31, 0xFF	; 255
    16f4:	80 83       	st	Z, r24
	_delay_us(10);
	Dio_write(E,Low);
    16f6:	8b e0       	ldi	r24, 0x0B	; 11
    16f8:	60 e0       	ldi	r22, 0x00	; 0
    16fa:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
    16fe:	fe 01       	movw	r30, r28
    1700:	eb 5b       	subi	r30, 0xBB	; 187
    1702:	ff 4f       	sbci	r31, 0xFF	; 255
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	a8 e4       	ldi	r26, 0x48	; 72
    170a:	b3 e4       	ldi	r27, 0x43	; 67
    170c:	80 83       	st	Z, r24
    170e:	91 83       	std	Z+1, r25	; 0x01
    1710:	a2 83       	std	Z+2, r26	; 0x02
    1712:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1714:	8e 01       	movw	r16, r28
    1716:	0f 5b       	subi	r16, 0xBF	; 191
    1718:	1f 4f       	sbci	r17, 0xFF	; 255
    171a:	fe 01       	movw	r30, r28
    171c:	eb 5b       	subi	r30, 0xBB	; 187
    171e:	ff 4f       	sbci	r31, 0xFF	; 255
    1720:	60 81       	ld	r22, Z
    1722:	71 81       	ldd	r23, Z+1	; 0x01
    1724:	82 81       	ldd	r24, Z+2	; 0x02
    1726:	93 81       	ldd	r25, Z+3	; 0x03
    1728:	2b ea       	ldi	r18, 0xAB	; 171
    172a:	3a ea       	ldi	r19, 0xAA	; 170
    172c:	4a ea       	ldi	r20, 0xAA	; 170
    172e:	50 e4       	ldi	r21, 0x40	; 64
    1730:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	f8 01       	movw	r30, r16
    173a:	80 83       	st	Z, r24
    173c:	91 83       	std	Z+1, r25	; 0x01
    173e:	a2 83       	std	Z+2, r26	; 0x02
    1740:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1742:	fe 01       	movw	r30, r28
    1744:	ef 5b       	subi	r30, 0xBF	; 191
    1746:	ff 4f       	sbci	r31, 0xFF	; 255
    1748:	60 81       	ld	r22, Z
    174a:	71 81       	ldd	r23, Z+1	; 0x01
    174c:	82 81       	ldd	r24, Z+2	; 0x02
    174e:	93 81       	ldd	r25, Z+3	; 0x03
    1750:	20 e0       	ldi	r18, 0x00	; 0
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	40 e8       	ldi	r20, 0x80	; 128
    1756:	5f e3       	ldi	r21, 0x3F	; 63
    1758:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    175c:	88 23       	and	r24, r24
    175e:	34 f4       	brge	.+12     	; 0x176c <lcd_cmd+0x392>
		__ticks = 1;
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	fe 01       	movw	r30, r28
    1764:	e0 5c       	subi	r30, 0xC0	; 192
    1766:	ff 4f       	sbci	r31, 0xFF	; 255
    1768:	80 83       	st	Z, r24
    176a:	9d c0       	rjmp	.+314    	; 0x18a6 <lcd_cmd+0x4cc>
	else if (__tmp > 255)
    176c:	fe 01       	movw	r30, r28
    176e:	ef 5b       	subi	r30, 0xBF	; 191
    1770:	ff 4f       	sbci	r31, 0xFF	; 255
    1772:	60 81       	ld	r22, Z
    1774:	71 81       	ldd	r23, Z+1	; 0x01
    1776:	82 81       	ldd	r24, Z+2	; 0x02
    1778:	93 81       	ldd	r25, Z+3	; 0x03
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	4f e7       	ldi	r20, 0x7F	; 127
    1780:	53 e4       	ldi	r21, 0x43	; 67
    1782:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1786:	18 16       	cp	r1, r24
    1788:	0c f0       	brlt	.+2      	; 0x178c <lcd_cmd+0x3b2>
    178a:	7e c0       	rjmp	.+252    	; 0x1888 <lcd_cmd+0x4ae>
	{
		_delay_ms(__us / 1000.0);
    178c:	fe 01       	movw	r30, r28
    178e:	eb 5b       	subi	r30, 0xBB	; 187
    1790:	ff 4f       	sbci	r31, 0xFF	; 255
    1792:	60 81       	ld	r22, Z
    1794:	71 81       	ldd	r23, Z+1	; 0x01
    1796:	82 81       	ldd	r24, Z+2	; 0x02
    1798:	93 81       	ldd	r25, Z+3	; 0x03
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	4a e7       	ldi	r20, 0x7A	; 122
    17a0:	54 e4       	ldi	r21, 0x44	; 68
    17a2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    17a6:	dc 01       	movw	r26, r24
    17a8:	cb 01       	movw	r24, r22
    17aa:	8c af       	std	Y+60, r24	; 0x3c
    17ac:	9d af       	std	Y+61, r25	; 0x3d
    17ae:	ae af       	std	Y+62, r26	; 0x3e
    17b0:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b2:	6c ad       	ldd	r22, Y+60	; 0x3c
    17b4:	7d ad       	ldd	r23, Y+61	; 0x3d
    17b6:	8e ad       	ldd	r24, Y+62	; 0x3e
    17b8:	9f ad       	ldd	r25, Y+63	; 0x3f
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	4a e7       	ldi	r20, 0x7A	; 122
    17c0:	55 e4       	ldi	r21, 0x45	; 69
    17c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	88 af       	std	Y+56, r24	; 0x38
    17cc:	99 af       	std	Y+57, r25	; 0x39
    17ce:	aa af       	std	Y+58, r26	; 0x3a
    17d0:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    17d2:	68 ad       	ldd	r22, Y+56	; 0x38
    17d4:	79 ad       	ldd	r23, Y+57	; 0x39
    17d6:	8a ad       	ldd	r24, Y+58	; 0x3a
    17d8:	9b ad       	ldd	r25, Y+59	; 0x3b
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	40 e8       	ldi	r20, 0x80	; 128
    17e0:	5f e3       	ldi	r21, 0x3F	; 63
    17e2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17e6:	88 23       	and	r24, r24
    17e8:	2c f4       	brge	.+10     	; 0x17f4 <lcd_cmd+0x41a>
		__ticks = 1;
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	9f ab       	std	Y+55, r25	; 0x37
    17f0:	8e ab       	std	Y+54, r24	; 0x36
    17f2:	3f c0       	rjmp	.+126    	; 0x1872 <lcd_cmd+0x498>
	else if (__tmp > 65535)
    17f4:	68 ad       	ldd	r22, Y+56	; 0x38
    17f6:	79 ad       	ldd	r23, Y+57	; 0x39
    17f8:	8a ad       	ldd	r24, Y+58	; 0x3a
    17fa:	9b ad       	ldd	r25, Y+59	; 0x3b
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	3f ef       	ldi	r19, 0xFF	; 255
    1800:	4f e7       	ldi	r20, 0x7F	; 127
    1802:	57 e4       	ldi	r21, 0x47	; 71
    1804:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1808:	18 16       	cp	r1, r24
    180a:	4c f5       	brge	.+82     	; 0x185e <lcd_cmd+0x484>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    180c:	6c ad       	ldd	r22, Y+60	; 0x3c
    180e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1810:	8e ad       	ldd	r24, Y+62	; 0x3e
    1812:	9f ad       	ldd	r25, Y+63	; 0x3f
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	40 e2       	ldi	r20, 0x20	; 32
    181a:	51 e4       	ldi	r21, 0x41	; 65
    181c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1820:	dc 01       	movw	r26, r24
    1822:	cb 01       	movw	r24, r22
    1824:	bc 01       	movw	r22, r24
    1826:	cd 01       	movw	r24, r26
    1828:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	9f ab       	std	Y+55, r25	; 0x37
    1832:	8e ab       	std	Y+54, r24	; 0x36
    1834:	0f c0       	rjmp	.+30     	; 0x1854 <lcd_cmd+0x47a>
    1836:	80 e9       	ldi	r24, 0x90	; 144
    1838:	91 e0       	ldi	r25, 0x01	; 1
    183a:	9d ab       	std	Y+53, r25	; 0x35
    183c:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    183e:	8c a9       	ldd	r24, Y+52	; 0x34
    1840:	9d a9       	ldd	r25, Y+53	; 0x35
    1842:	01 97       	sbiw	r24, 0x01	; 1
    1844:	f1 f7       	brne	.-4      	; 0x1842 <lcd_cmd+0x468>
    1846:	9d ab       	std	Y+53, r25	; 0x35
    1848:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    184a:	8e a9       	ldd	r24, Y+54	; 0x36
    184c:	9f a9       	ldd	r25, Y+55	; 0x37
    184e:	01 97       	sbiw	r24, 0x01	; 1
    1850:	9f ab       	std	Y+55, r25	; 0x37
    1852:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1854:	8e a9       	ldd	r24, Y+54	; 0x36
    1856:	9f a9       	ldd	r25, Y+55	; 0x37
    1858:	00 97       	sbiw	r24, 0x00	; 0
    185a:	69 f7       	brne	.-38     	; 0x1836 <lcd_cmd+0x45c>
    185c:	2d c0       	rjmp	.+90     	; 0x18b8 <lcd_cmd+0x4de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    185e:	68 ad       	ldd	r22, Y+56	; 0x38
    1860:	79 ad       	ldd	r23, Y+57	; 0x39
    1862:	8a ad       	ldd	r24, Y+58	; 0x3a
    1864:	9b ad       	ldd	r25, Y+59	; 0x3b
    1866:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    186a:	dc 01       	movw	r26, r24
    186c:	cb 01       	movw	r24, r22
    186e:	9f ab       	std	Y+55, r25	; 0x37
    1870:	8e ab       	std	Y+54, r24	; 0x36
    1872:	8e a9       	ldd	r24, Y+54	; 0x36
    1874:	9f a9       	ldd	r25, Y+55	; 0x37
    1876:	9b ab       	std	Y+51, r25	; 0x33
    1878:	8a ab       	std	Y+50, r24	; 0x32
    187a:	8a a9       	ldd	r24, Y+50	; 0x32
    187c:	9b a9       	ldd	r25, Y+51	; 0x33
    187e:	01 97       	sbiw	r24, 0x01	; 1
    1880:	f1 f7       	brne	.-4      	; 0x187e <lcd_cmd+0x4a4>
    1882:	9b ab       	std	Y+51, r25	; 0x33
    1884:	8a ab       	std	Y+50, r24	; 0x32
    1886:	18 c0       	rjmp	.+48     	; 0x18b8 <lcd_cmd+0x4de>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1888:	fe 01       	movw	r30, r28
    188a:	ef 5b       	subi	r30, 0xBF	; 191
    188c:	ff 4f       	sbci	r31, 0xFF	; 255
    188e:	60 81       	ld	r22, Z
    1890:	71 81       	ldd	r23, Z+1	; 0x01
    1892:	82 81       	ldd	r24, Z+2	; 0x02
    1894:	93 81       	ldd	r25, Z+3	; 0x03
    1896:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    189a:	dc 01       	movw	r26, r24
    189c:	cb 01       	movw	r24, r22
    189e:	fe 01       	movw	r30, r28
    18a0:	e0 5c       	subi	r30, 0xC0	; 192
    18a2:	ff 4f       	sbci	r31, 0xFF	; 255
    18a4:	80 83       	st	Z, r24
    18a6:	fe 01       	movw	r30, r28
    18a8:	e0 5c       	subi	r30, 0xC0	; 192
    18aa:	ff 4f       	sbci	r31, 0xFF	; 255
    18ac:	80 81       	ld	r24, Z
    18ae:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    18b0:	89 a9       	ldd	r24, Y+49	; 0x31
    18b2:	8a 95       	dec	r24
    18b4:	f1 f7       	brne	.-4      	; 0x18b2 <lcd_cmd+0x4d8>
    18b6:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(200);

	if(GET_BIT(cmd,3)){ Dio_write(D7,High);}else{ Dio_write(D7,Low);}
    18b8:	fe 01       	movw	r30, r28
    18ba:	ef 59       	subi	r30, 0x9F	; 159
    18bc:	ff 4f       	sbci	r31, 0xFF	; 255
    18be:	80 81       	ld	r24, Z
    18c0:	88 2f       	mov	r24, r24
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	88 70       	andi	r24, 0x08	; 8
    18c6:	90 70       	andi	r25, 0x00	; 0
    18c8:	00 97       	sbiw	r24, 0x00	; 0
    18ca:	29 f0       	breq	.+10     	; 0x18d6 <lcd_cmd+0x4fc>
    18cc:	87 e0       	ldi	r24, 0x07	; 7
    18ce:	61 e0       	ldi	r22, 0x01	; 1
    18d0:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
    18d4:	04 c0       	rjmp	.+8      	; 0x18de <lcd_cmd+0x504>
    18d6:	87 e0       	ldi	r24, 0x07	; 7
    18d8:	60 e0       	ldi	r22, 0x00	; 0
    18da:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
	if(GET_BIT(cmd,2)){ Dio_write(D6,High);}else{ Dio_write(D6,Low);}
    18de:	fe 01       	movw	r30, r28
    18e0:	ef 59       	subi	r30, 0x9F	; 159
    18e2:	ff 4f       	sbci	r31, 0xFF	; 255
    18e4:	80 81       	ld	r24, Z
    18e6:	88 2f       	mov	r24, r24
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	84 70       	andi	r24, 0x04	; 4
    18ec:	90 70       	andi	r25, 0x00	; 0
    18ee:	00 97       	sbiw	r24, 0x00	; 0
    18f0:	29 f0       	breq	.+10     	; 0x18fc <lcd_cmd+0x522>
    18f2:	86 e0       	ldi	r24, 0x06	; 6
    18f4:	61 e0       	ldi	r22, 0x01	; 1
    18f6:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
    18fa:	04 c0       	rjmp	.+8      	; 0x1904 <lcd_cmd+0x52a>
    18fc:	86 e0       	ldi	r24, 0x06	; 6
    18fe:	60 e0       	ldi	r22, 0x00	; 0
    1900:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
	if(GET_BIT(cmd,1)){ Dio_write(D5,High);}else{ Dio_write(D5,Low);}
    1904:	fe 01       	movw	r30, r28
    1906:	ef 59       	subi	r30, 0x9F	; 159
    1908:	ff 4f       	sbci	r31, 0xFF	; 255
    190a:	80 81       	ld	r24, Z
    190c:	88 2f       	mov	r24, r24
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	82 70       	andi	r24, 0x02	; 2
    1912:	90 70       	andi	r25, 0x00	; 0
    1914:	00 97       	sbiw	r24, 0x00	; 0
    1916:	29 f0       	breq	.+10     	; 0x1922 <lcd_cmd+0x548>
    1918:	85 e0       	ldi	r24, 0x05	; 5
    191a:	61 e0       	ldi	r22, 0x01	; 1
    191c:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
    1920:	04 c0       	rjmp	.+8      	; 0x192a <lcd_cmd+0x550>
    1922:	85 e0       	ldi	r24, 0x05	; 5
    1924:	60 e0       	ldi	r22, 0x00	; 0
    1926:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
	if(GET_BIT(cmd,0)){ Dio_write(D4,High);}else{ Dio_write(D4,Low);}
    192a:	fe 01       	movw	r30, r28
    192c:	ef 59       	subi	r30, 0x9F	; 159
    192e:	ff 4f       	sbci	r31, 0xFF	; 255
    1930:	80 81       	ld	r24, Z
    1932:	88 2f       	mov	r24, r24
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	81 70       	andi	r24, 0x01	; 1
    1938:	90 70       	andi	r25, 0x00	; 0
    193a:	88 23       	and	r24, r24
    193c:	29 f0       	breq	.+10     	; 0x1948 <lcd_cmd+0x56e>
    193e:	84 e0       	ldi	r24, 0x04	; 4
    1940:	61 e0       	ldi	r22, 0x01	; 1
    1942:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
    1946:	04 c0       	rjmp	.+8      	; 0x1950 <lcd_cmd+0x576>
    1948:	84 e0       	ldi	r24, 0x04	; 4
    194a:	60 e0       	ldi	r22, 0x00	; 0
    194c:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
	Dio_write(E,High);
    1950:	8b e0       	ldi	r24, 0x0B	; 11
    1952:	61 e0       	ldi	r22, 0x01	; 1
    1954:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	a0 e2       	ldi	r26, 0x20	; 32
    195e:	b1 e4       	ldi	r27, 0x41	; 65
    1960:	8d a7       	std	Y+45, r24	; 0x2d
    1962:	9e a7       	std	Y+46, r25	; 0x2e
    1964:	af a7       	std	Y+47, r26	; 0x2f
    1966:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1968:	6d a5       	ldd	r22, Y+45	; 0x2d
    196a:	7e a5       	ldd	r23, Y+46	; 0x2e
    196c:	8f a5       	ldd	r24, Y+47	; 0x2f
    196e:	98 a9       	ldd	r25, Y+48	; 0x30
    1970:	2b ea       	ldi	r18, 0xAB	; 171
    1972:	3a ea       	ldi	r19, 0xAA	; 170
    1974:	4a ea       	ldi	r20, 0xAA	; 170
    1976:	50 e4       	ldi	r21, 0x40	; 64
    1978:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	89 a7       	std	Y+41, r24	; 0x29
    1982:	9a a7       	std	Y+42, r25	; 0x2a
    1984:	ab a7       	std	Y+43, r26	; 0x2b
    1986:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1988:	69 a5       	ldd	r22, Y+41	; 0x29
    198a:	7a a5       	ldd	r23, Y+42	; 0x2a
    198c:	8b a5       	ldd	r24, Y+43	; 0x2b
    198e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	40 e8       	ldi	r20, 0x80	; 128
    1996:	5f e3       	ldi	r21, 0x3F	; 63
    1998:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    199c:	88 23       	and	r24, r24
    199e:	1c f4       	brge	.+6      	; 0x19a6 <lcd_cmd+0x5cc>
		__ticks = 1;
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	88 a7       	std	Y+40, r24	; 0x28
    19a4:	91 c0       	rjmp	.+290    	; 0x1ac8 <lcd_cmd+0x6ee>
	else if (__tmp > 255)
    19a6:	69 a5       	ldd	r22, Y+41	; 0x29
    19a8:	7a a5       	ldd	r23, Y+42	; 0x2a
    19aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    19ac:	9c a5       	ldd	r25, Y+44	; 0x2c
    19ae:	20 e0       	ldi	r18, 0x00	; 0
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	4f e7       	ldi	r20, 0x7F	; 127
    19b4:	53 e4       	ldi	r21, 0x43	; 67
    19b6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19ba:	18 16       	cp	r1, r24
    19bc:	0c f0       	brlt	.+2      	; 0x19c0 <lcd_cmd+0x5e6>
    19be:	7b c0       	rjmp	.+246    	; 0x1ab6 <lcd_cmd+0x6dc>
	{
		_delay_ms(__us / 1000.0);
    19c0:	6d a5       	ldd	r22, Y+45	; 0x2d
    19c2:	7e a5       	ldd	r23, Y+46	; 0x2e
    19c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    19c6:	98 a9       	ldd	r25, Y+48	; 0x30
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	4a e7       	ldi	r20, 0x7A	; 122
    19ce:	54 e4       	ldi	r21, 0x44	; 68
    19d0:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	8c a3       	std	Y+36, r24	; 0x24
    19da:	9d a3       	std	Y+37, r25	; 0x25
    19dc:	ae a3       	std	Y+38, r26	; 0x26
    19de:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e0:	6c a1       	ldd	r22, Y+36	; 0x24
    19e2:	7d a1       	ldd	r23, Y+37	; 0x25
    19e4:	8e a1       	ldd	r24, Y+38	; 0x26
    19e6:	9f a1       	ldd	r25, Y+39	; 0x27
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	4a e7       	ldi	r20, 0x7A	; 122
    19ee:	55 e4       	ldi	r21, 0x45	; 69
    19f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19f4:	dc 01       	movw	r26, r24
    19f6:	cb 01       	movw	r24, r22
    19f8:	88 a3       	std	Y+32, r24	; 0x20
    19fa:	99 a3       	std	Y+33, r25	; 0x21
    19fc:	aa a3       	std	Y+34, r26	; 0x22
    19fe:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1a00:	68 a1       	ldd	r22, Y+32	; 0x20
    1a02:	79 a1       	ldd	r23, Y+33	; 0x21
    1a04:	8a a1       	ldd	r24, Y+34	; 0x22
    1a06:	9b a1       	ldd	r25, Y+35	; 0x23
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	40 e8       	ldi	r20, 0x80	; 128
    1a0e:	5f e3       	ldi	r21, 0x3F	; 63
    1a10:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a14:	88 23       	and	r24, r24
    1a16:	2c f4       	brge	.+10     	; 0x1a22 <lcd_cmd+0x648>
		__ticks = 1;
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	9f 8f       	std	Y+31, r25	; 0x1f
    1a1e:	8e 8f       	std	Y+30, r24	; 0x1e
    1a20:	3f c0       	rjmp	.+126    	; 0x1aa0 <lcd_cmd+0x6c6>
	else if (__tmp > 65535)
    1a22:	68 a1       	ldd	r22, Y+32	; 0x20
    1a24:	79 a1       	ldd	r23, Y+33	; 0x21
    1a26:	8a a1       	ldd	r24, Y+34	; 0x22
    1a28:	9b a1       	ldd	r25, Y+35	; 0x23
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	3f ef       	ldi	r19, 0xFF	; 255
    1a2e:	4f e7       	ldi	r20, 0x7F	; 127
    1a30:	57 e4       	ldi	r21, 0x47	; 71
    1a32:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a36:	18 16       	cp	r1, r24
    1a38:	4c f5       	brge	.+82     	; 0x1a8c <lcd_cmd+0x6b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a3a:	6c a1       	ldd	r22, Y+36	; 0x24
    1a3c:	7d a1       	ldd	r23, Y+37	; 0x25
    1a3e:	8e a1       	ldd	r24, Y+38	; 0x26
    1a40:	9f a1       	ldd	r25, Y+39	; 0x27
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	40 e2       	ldi	r20, 0x20	; 32
    1a48:	51 e4       	ldi	r21, 0x41	; 65
    1a4a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	bc 01       	movw	r22, r24
    1a54:	cd 01       	movw	r24, r26
    1a56:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	9f 8f       	std	Y+31, r25	; 0x1f
    1a60:	8e 8f       	std	Y+30, r24	; 0x1e
    1a62:	0f c0       	rjmp	.+30     	; 0x1a82 <lcd_cmd+0x6a8>
    1a64:	80 e9       	ldi	r24, 0x90	; 144
    1a66:	91 e0       	ldi	r25, 0x01	; 1
    1a68:	9d 8f       	std	Y+29, r25	; 0x1d
    1a6a:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a6c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a6e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1a70:	01 97       	sbiw	r24, 0x01	; 1
    1a72:	f1 f7       	brne	.-4      	; 0x1a70 <lcd_cmd+0x696>
    1a74:	9d 8f       	std	Y+29, r25	; 0x1d
    1a76:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a78:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a7a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a7c:	01 97       	sbiw	r24, 0x01	; 1
    1a7e:	9f 8f       	std	Y+31, r25	; 0x1f
    1a80:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a82:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a84:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a86:	00 97       	sbiw	r24, 0x00	; 0
    1a88:	69 f7       	brne	.-38     	; 0x1a64 <lcd_cmd+0x68a>
    1a8a:	24 c0       	rjmp	.+72     	; 0x1ad4 <lcd_cmd+0x6fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a8c:	68 a1       	ldd	r22, Y+32	; 0x20
    1a8e:	79 a1       	ldd	r23, Y+33	; 0x21
    1a90:	8a a1       	ldd	r24, Y+34	; 0x22
    1a92:	9b a1       	ldd	r25, Y+35	; 0x23
    1a94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	9f 8f       	std	Y+31, r25	; 0x1f
    1a9e:	8e 8f       	std	Y+30, r24	; 0x1e
    1aa0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1aa2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1aa4:	9b 8f       	std	Y+27, r25	; 0x1b
    1aa6:	8a 8f       	std	Y+26, r24	; 0x1a
    1aa8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1aaa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1aac:	01 97       	sbiw	r24, 0x01	; 1
    1aae:	f1 f7       	brne	.-4      	; 0x1aac <lcd_cmd+0x6d2>
    1ab0:	9b 8f       	std	Y+27, r25	; 0x1b
    1ab2:	8a 8f       	std	Y+26, r24	; 0x1a
    1ab4:	0f c0       	rjmp	.+30     	; 0x1ad4 <lcd_cmd+0x6fa>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ab6:	69 a5       	ldd	r22, Y+41	; 0x29
    1ab8:	7a a5       	ldd	r23, Y+42	; 0x2a
    1aba:	8b a5       	ldd	r24, Y+43	; 0x2b
    1abc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1abe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	88 a7       	std	Y+40, r24	; 0x28
    1ac8:	88 a5       	ldd	r24, Y+40	; 0x28
    1aca:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1acc:	89 8d       	ldd	r24, Y+25	; 0x19
    1ace:	8a 95       	dec	r24
    1ad0:	f1 f7       	brne	.-4      	; 0x1ace <lcd_cmd+0x6f4>
    1ad2:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	Dio_write(E,Low);
    1ad4:	8b e0       	ldi	r24, 0x0B	; 11
    1ad6:	60 e0       	ldi	r22, 0x00	; 0
    1ad8:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	a8 e4       	ldi	r26, 0x48	; 72
    1ae2:	b3 e4       	ldi	r27, 0x43	; 67
    1ae4:	8d 8b       	std	Y+21, r24	; 0x15
    1ae6:	9e 8b       	std	Y+22, r25	; 0x16
    1ae8:	af 8b       	std	Y+23, r26	; 0x17
    1aea:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1aec:	6d 89       	ldd	r22, Y+21	; 0x15
    1aee:	7e 89       	ldd	r23, Y+22	; 0x16
    1af0:	8f 89       	ldd	r24, Y+23	; 0x17
    1af2:	98 8d       	ldd	r25, Y+24	; 0x18
    1af4:	2b ea       	ldi	r18, 0xAB	; 171
    1af6:	3a ea       	ldi	r19, 0xAA	; 170
    1af8:	4a ea       	ldi	r20, 0xAA	; 170
    1afa:	50 e4       	ldi	r21, 0x40	; 64
    1afc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	89 8b       	std	Y+17, r24	; 0x11
    1b06:	9a 8b       	std	Y+18, r25	; 0x12
    1b08:	ab 8b       	std	Y+19, r26	; 0x13
    1b0a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1b0c:	69 89       	ldd	r22, Y+17	; 0x11
    1b0e:	7a 89       	ldd	r23, Y+18	; 0x12
    1b10:	8b 89       	ldd	r24, Y+19	; 0x13
    1b12:	9c 89       	ldd	r25, Y+20	; 0x14
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	40 e8       	ldi	r20, 0x80	; 128
    1b1a:	5f e3       	ldi	r21, 0x3F	; 63
    1b1c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b20:	88 23       	and	r24, r24
    1b22:	1c f4       	brge	.+6      	; 0x1b2a <lcd_cmd+0x750>
		__ticks = 1;
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	88 8b       	std	Y+16, r24	; 0x10
    1b28:	91 c0       	rjmp	.+290    	; 0x1c4c <lcd_cmd+0x872>
	else if (__tmp > 255)
    1b2a:	69 89       	ldd	r22, Y+17	; 0x11
    1b2c:	7a 89       	ldd	r23, Y+18	; 0x12
    1b2e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b30:	9c 89       	ldd	r25, Y+20	; 0x14
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	4f e7       	ldi	r20, 0x7F	; 127
    1b38:	53 e4       	ldi	r21, 0x43	; 67
    1b3a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b3e:	18 16       	cp	r1, r24
    1b40:	0c f0       	brlt	.+2      	; 0x1b44 <lcd_cmd+0x76a>
    1b42:	7b c0       	rjmp	.+246    	; 0x1c3a <lcd_cmd+0x860>
	{
		_delay_ms(__us / 1000.0);
    1b44:	6d 89       	ldd	r22, Y+21	; 0x15
    1b46:	7e 89       	ldd	r23, Y+22	; 0x16
    1b48:	8f 89       	ldd	r24, Y+23	; 0x17
    1b4a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	4a e7       	ldi	r20, 0x7A	; 122
    1b52:	54 e4       	ldi	r21, 0x44	; 68
    1b54:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1b58:	dc 01       	movw	r26, r24
    1b5a:	cb 01       	movw	r24, r22
    1b5c:	8c 87       	std	Y+12, r24	; 0x0c
    1b5e:	9d 87       	std	Y+13, r25	; 0x0d
    1b60:	ae 87       	std	Y+14, r26	; 0x0e
    1b62:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b64:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b66:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b68:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b6a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b6c:	20 e0       	ldi	r18, 0x00	; 0
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	4a e7       	ldi	r20, 0x7A	; 122
    1b72:	55 e4       	ldi	r21, 0x45	; 69
    1b74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	88 87       	std	Y+8, r24	; 0x08
    1b7e:	99 87       	std	Y+9, r25	; 0x09
    1b80:	aa 87       	std	Y+10, r26	; 0x0a
    1b82:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1b84:	68 85       	ldd	r22, Y+8	; 0x08
    1b86:	79 85       	ldd	r23, Y+9	; 0x09
    1b88:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b8a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	40 e8       	ldi	r20, 0x80	; 128
    1b92:	5f e3       	ldi	r21, 0x3F	; 63
    1b94:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b98:	88 23       	and	r24, r24
    1b9a:	2c f4       	brge	.+10     	; 0x1ba6 <lcd_cmd+0x7cc>
		__ticks = 1;
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	9f 83       	std	Y+7, r25	; 0x07
    1ba2:	8e 83       	std	Y+6, r24	; 0x06
    1ba4:	3f c0       	rjmp	.+126    	; 0x1c24 <lcd_cmd+0x84a>
	else if (__tmp > 65535)
    1ba6:	68 85       	ldd	r22, Y+8	; 0x08
    1ba8:	79 85       	ldd	r23, Y+9	; 0x09
    1baa:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bac:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	3f ef       	ldi	r19, 0xFF	; 255
    1bb2:	4f e7       	ldi	r20, 0x7F	; 127
    1bb4:	57 e4       	ldi	r21, 0x47	; 71
    1bb6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1bba:	18 16       	cp	r1, r24
    1bbc:	4c f5       	brge	.+82     	; 0x1c10 <lcd_cmd+0x836>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bbe:	6c 85       	ldd	r22, Y+12	; 0x0c
    1bc0:	7d 85       	ldd	r23, Y+13	; 0x0d
    1bc2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bc4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	40 e2       	ldi	r20, 0x20	; 32
    1bcc:	51 e4       	ldi	r21, 0x41	; 65
    1bce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	bc 01       	movw	r22, r24
    1bd8:	cd 01       	movw	r24, r26
    1bda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	9f 83       	std	Y+7, r25	; 0x07
    1be4:	8e 83       	std	Y+6, r24	; 0x06
    1be6:	0f c0       	rjmp	.+30     	; 0x1c06 <lcd_cmd+0x82c>
    1be8:	80 e9       	ldi	r24, 0x90	; 144
    1bea:	91 e0       	ldi	r25, 0x01	; 1
    1bec:	9d 83       	std	Y+5, r25	; 0x05
    1bee:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bf0:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf2:	9d 81       	ldd	r25, Y+5	; 0x05
    1bf4:	01 97       	sbiw	r24, 0x01	; 1
    1bf6:	f1 f7       	brne	.-4      	; 0x1bf4 <lcd_cmd+0x81a>
    1bf8:	9d 83       	std	Y+5, r25	; 0x05
    1bfa:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bfc:	8e 81       	ldd	r24, Y+6	; 0x06
    1bfe:	9f 81       	ldd	r25, Y+7	; 0x07
    1c00:	01 97       	sbiw	r24, 0x01	; 1
    1c02:	9f 83       	std	Y+7, r25	; 0x07
    1c04:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c06:	8e 81       	ldd	r24, Y+6	; 0x06
    1c08:	9f 81       	ldd	r25, Y+7	; 0x07
    1c0a:	00 97       	sbiw	r24, 0x00	; 0
    1c0c:	69 f7       	brne	.-38     	; 0x1be8 <lcd_cmd+0x80e>
    1c0e:	24 c0       	rjmp	.+72     	; 0x1c58 <lcd_cmd+0x87e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c10:	68 85       	ldd	r22, Y+8	; 0x08
    1c12:	79 85       	ldd	r23, Y+9	; 0x09
    1c14:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c16:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	9f 83       	std	Y+7, r25	; 0x07
    1c22:	8e 83       	std	Y+6, r24	; 0x06
    1c24:	8e 81       	ldd	r24, Y+6	; 0x06
    1c26:	9f 81       	ldd	r25, Y+7	; 0x07
    1c28:	9b 83       	std	Y+3, r25	; 0x03
    1c2a:	8a 83       	std	Y+2, r24	; 0x02
    1c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c30:	01 97       	sbiw	r24, 0x01	; 1
    1c32:	f1 f7       	brne	.-4      	; 0x1c30 <lcd_cmd+0x856>
    1c34:	9b 83       	std	Y+3, r25	; 0x03
    1c36:	8a 83       	std	Y+2, r24	; 0x02
    1c38:	0f c0       	rjmp	.+30     	; 0x1c58 <lcd_cmd+0x87e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c3a:	69 89       	ldd	r22, Y+17	; 0x11
    1c3c:	7a 89       	ldd	r23, Y+18	; 0x12
    1c3e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c40:	9c 89       	ldd	r25, Y+20	; 0x14
    1c42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	88 8b       	std	Y+16, r24	; 0x10
    1c4c:	88 89       	ldd	r24, Y+16	; 0x10
    1c4e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c50:	89 81       	ldd	r24, Y+1	; 0x01
    1c52:	8a 95       	dec	r24
    1c54:	f1 f7       	brne	.-4      	; 0x1c52 <lcd_cmd+0x878>
    1c56:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(200);
}
    1c58:	cf 59       	subi	r28, 0x9F	; 159
    1c5a:	df 4f       	sbci	r29, 0xFF	; 255
    1c5c:	0f b6       	in	r0, 0x3f	; 63
    1c5e:	f8 94       	cli
    1c60:	de bf       	out	0x3e, r29	; 62
    1c62:	0f be       	out	0x3f, r0	; 63
    1c64:	cd bf       	out	0x3d, r28	; 61
    1c66:	cf 91       	pop	r28
    1c68:	df 91       	pop	r29
    1c6a:	1f 91       	pop	r17
    1c6c:	0f 91       	pop	r16
    1c6e:	08 95       	ret

00001c70 <lcd_data>:

void lcd_data(uint8 data){
    1c70:	0f 93       	push	r16
    1c72:	1f 93       	push	r17
    1c74:	df 93       	push	r29
    1c76:	cf 93       	push	r28
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
    1c7c:	c1 56       	subi	r28, 0x61	; 97
    1c7e:	d0 40       	sbci	r29, 0x00	; 0
    1c80:	0f b6       	in	r0, 0x3f	; 63
    1c82:	f8 94       	cli
    1c84:	de bf       	out	0x3e, r29	; 62
    1c86:	0f be       	out	0x3f, r0	; 63
    1c88:	cd bf       	out	0x3d, r28	; 61
    1c8a:	fe 01       	movw	r30, r28
    1c8c:	ef 59       	subi	r30, 0x9F	; 159
    1c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c90:	80 83       	st	Z, r24
	Dio_write(RS, High);
    1c92:	89 e0       	ldi	r24, 0x09	; 9
    1c94:	61 e0       	ldi	r22, 0x01	; 1
    1c96:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
	Dio_write(RW, Low);
    1c9a:	8a e0       	ldi	r24, 0x0A	; 10
    1c9c:	60 e0       	ldi	r22, 0x00	; 0
    1c9e:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>

	if(GET_BIT(data,3)){ Dio_write(D7,High);}else{ Dio_write(D7,Low);}
    1ca2:	fe 01       	movw	r30, r28
    1ca4:	ef 59       	subi	r30, 0x9F	; 159
    1ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca8:	80 81       	ld	r24, Z
    1caa:	88 2f       	mov	r24, r24
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	88 70       	andi	r24, 0x08	; 8
    1cb0:	90 70       	andi	r25, 0x00	; 0
    1cb2:	00 97       	sbiw	r24, 0x00	; 0
    1cb4:	29 f0       	breq	.+10     	; 0x1cc0 <lcd_data+0x50>
    1cb6:	87 e0       	ldi	r24, 0x07	; 7
    1cb8:	61 e0       	ldi	r22, 0x01	; 1
    1cba:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
    1cbe:	04 c0       	rjmp	.+8      	; 0x1cc8 <lcd_data+0x58>
    1cc0:	87 e0       	ldi	r24, 0x07	; 7
    1cc2:	60 e0       	ldi	r22, 0x00	; 0
    1cc4:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
	if(GET_BIT(data,2)){ Dio_write(D6,High);}else{ Dio_write(D6,Low);}
    1cc8:	fe 01       	movw	r30, r28
    1cca:	ef 59       	subi	r30, 0x9F	; 159
    1ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cce:	80 81       	ld	r24, Z
    1cd0:	88 2f       	mov	r24, r24
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	84 70       	andi	r24, 0x04	; 4
    1cd6:	90 70       	andi	r25, 0x00	; 0
    1cd8:	00 97       	sbiw	r24, 0x00	; 0
    1cda:	29 f0       	breq	.+10     	; 0x1ce6 <lcd_data+0x76>
    1cdc:	86 e0       	ldi	r24, 0x06	; 6
    1cde:	61 e0       	ldi	r22, 0x01	; 1
    1ce0:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
    1ce4:	04 c0       	rjmp	.+8      	; 0x1cee <lcd_data+0x7e>
    1ce6:	86 e0       	ldi	r24, 0x06	; 6
    1ce8:	60 e0       	ldi	r22, 0x00	; 0
    1cea:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
	if(GET_BIT(data,1)){ Dio_write(D5,High);}else{ Dio_write(D5,Low);}
    1cee:	fe 01       	movw	r30, r28
    1cf0:	ef 59       	subi	r30, 0x9F	; 159
    1cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf4:	80 81       	ld	r24, Z
    1cf6:	88 2f       	mov	r24, r24
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	82 70       	andi	r24, 0x02	; 2
    1cfc:	90 70       	andi	r25, 0x00	; 0
    1cfe:	00 97       	sbiw	r24, 0x00	; 0
    1d00:	29 f0       	breq	.+10     	; 0x1d0c <lcd_data+0x9c>
    1d02:	85 e0       	ldi	r24, 0x05	; 5
    1d04:	61 e0       	ldi	r22, 0x01	; 1
    1d06:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
    1d0a:	04 c0       	rjmp	.+8      	; 0x1d14 <lcd_data+0xa4>
    1d0c:	85 e0       	ldi	r24, 0x05	; 5
    1d0e:	60 e0       	ldi	r22, 0x00	; 0
    1d10:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
	if(GET_BIT(data,0)){ Dio_write(D4,High);}else{ Dio_write(D4,Low);}
    1d14:	fe 01       	movw	r30, r28
    1d16:	ef 59       	subi	r30, 0x9F	; 159
    1d18:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1a:	80 81       	ld	r24, Z
    1d1c:	88 2f       	mov	r24, r24
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	81 70       	andi	r24, 0x01	; 1
    1d22:	90 70       	andi	r25, 0x00	; 0
    1d24:	88 23       	and	r24, r24
    1d26:	29 f0       	breq	.+10     	; 0x1d32 <lcd_data+0xc2>
    1d28:	84 e0       	ldi	r24, 0x04	; 4
    1d2a:	61 e0       	ldi	r22, 0x01	; 1
    1d2c:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
    1d30:	04 c0       	rjmp	.+8      	; 0x1d3a <lcd_data+0xca>
    1d32:	84 e0       	ldi	r24, 0x04	; 4
    1d34:	60 e0       	ldi	r22, 0x00	; 0
    1d36:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
	Dio_write(E,High);
    1d3a:	8b e0       	ldi	r24, 0x0B	; 11
    1d3c:	61 e0       	ldi	r22, 0x01	; 1
    1d3e:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
    1d42:	fe 01       	movw	r30, r28
    1d44:	e3 5a       	subi	r30, 0xA3	; 163
    1d46:	ff 4f       	sbci	r31, 0xFF	; 255
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	a0 e2       	ldi	r26, 0x20	; 32
    1d4e:	b1 e4       	ldi	r27, 0x41	; 65
    1d50:	80 83       	st	Z, r24
    1d52:	91 83       	std	Z+1, r25	; 0x01
    1d54:	a2 83       	std	Z+2, r26	; 0x02
    1d56:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d58:	8e 01       	movw	r16, r28
    1d5a:	07 5a       	subi	r16, 0xA7	; 167
    1d5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d5e:	fe 01       	movw	r30, r28
    1d60:	e3 5a       	subi	r30, 0xA3	; 163
    1d62:	ff 4f       	sbci	r31, 0xFF	; 255
    1d64:	60 81       	ld	r22, Z
    1d66:	71 81       	ldd	r23, Z+1	; 0x01
    1d68:	82 81       	ldd	r24, Z+2	; 0x02
    1d6a:	93 81       	ldd	r25, Z+3	; 0x03
    1d6c:	2b ea       	ldi	r18, 0xAB	; 171
    1d6e:	3a ea       	ldi	r19, 0xAA	; 170
    1d70:	4a ea       	ldi	r20, 0xAA	; 170
    1d72:	50 e4       	ldi	r21, 0x40	; 64
    1d74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	f8 01       	movw	r30, r16
    1d7e:	80 83       	st	Z, r24
    1d80:	91 83       	std	Z+1, r25	; 0x01
    1d82:	a2 83       	std	Z+2, r26	; 0x02
    1d84:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d86:	fe 01       	movw	r30, r28
    1d88:	e7 5a       	subi	r30, 0xA7	; 167
    1d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8c:	60 81       	ld	r22, Z
    1d8e:	71 81       	ldd	r23, Z+1	; 0x01
    1d90:	82 81       	ldd	r24, Z+2	; 0x02
    1d92:	93 81       	ldd	r25, Z+3	; 0x03
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	40 e8       	ldi	r20, 0x80	; 128
    1d9a:	5f e3       	ldi	r21, 0x3F	; 63
    1d9c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1da0:	88 23       	and	r24, r24
    1da2:	34 f4       	brge	.+12     	; 0x1db0 <lcd_data+0x140>
		__ticks = 1;
    1da4:	fe 01       	movw	r30, r28
    1da6:	e8 5a       	subi	r30, 0xA8	; 168
    1da8:	ff 4f       	sbci	r31, 0xFF	; 255
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	80 83       	st	Z, r24
    1dae:	e0 c0       	rjmp	.+448    	; 0x1f70 <lcd_data+0x300>
	else if (__tmp > 255)
    1db0:	fe 01       	movw	r30, r28
    1db2:	e7 5a       	subi	r30, 0xA7	; 167
    1db4:	ff 4f       	sbci	r31, 0xFF	; 255
    1db6:	60 81       	ld	r22, Z
    1db8:	71 81       	ldd	r23, Z+1	; 0x01
    1dba:	82 81       	ldd	r24, Z+2	; 0x02
    1dbc:	93 81       	ldd	r25, Z+3	; 0x03
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	4f e7       	ldi	r20, 0x7F	; 127
    1dc4:	53 e4       	ldi	r21, 0x43	; 67
    1dc6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1dca:	18 16       	cp	r1, r24
    1dcc:	0c f0       	brlt	.+2      	; 0x1dd0 <lcd_data+0x160>
    1dce:	c0 c0       	rjmp	.+384    	; 0x1f50 <lcd_data+0x2e0>
	{
		_delay_ms(__us / 1000.0);
    1dd0:	fe 01       	movw	r30, r28
    1dd2:	e3 5a       	subi	r30, 0xA3	; 163
    1dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd6:	60 81       	ld	r22, Z
    1dd8:	71 81       	ldd	r23, Z+1	; 0x01
    1dda:	82 81       	ldd	r24, Z+2	; 0x02
    1ddc:	93 81       	ldd	r25, Z+3	; 0x03
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	4a e7       	ldi	r20, 0x7A	; 122
    1de4:	54 e4       	ldi	r21, 0x44	; 68
    1de6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	fe 01       	movw	r30, r28
    1df0:	ec 5a       	subi	r30, 0xAC	; 172
    1df2:	ff 4f       	sbci	r31, 0xFF	; 255
    1df4:	80 83       	st	Z, r24
    1df6:	91 83       	std	Z+1, r25	; 0x01
    1df8:	a2 83       	std	Z+2, r26	; 0x02
    1dfa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dfc:	8e 01       	movw	r16, r28
    1dfe:	00 5b       	subi	r16, 0xB0	; 176
    1e00:	1f 4f       	sbci	r17, 0xFF	; 255
    1e02:	fe 01       	movw	r30, r28
    1e04:	ec 5a       	subi	r30, 0xAC	; 172
    1e06:	ff 4f       	sbci	r31, 0xFF	; 255
    1e08:	60 81       	ld	r22, Z
    1e0a:	71 81       	ldd	r23, Z+1	; 0x01
    1e0c:	82 81       	ldd	r24, Z+2	; 0x02
    1e0e:	93 81       	ldd	r25, Z+3	; 0x03
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	4a e7       	ldi	r20, 0x7A	; 122
    1e16:	55 e4       	ldi	r21, 0x45	; 69
    1e18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	f8 01       	movw	r30, r16
    1e22:	80 83       	st	Z, r24
    1e24:	91 83       	std	Z+1, r25	; 0x01
    1e26:	a2 83       	std	Z+2, r26	; 0x02
    1e28:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	e0 5b       	subi	r30, 0xB0	; 176
    1e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e30:	60 81       	ld	r22, Z
    1e32:	71 81       	ldd	r23, Z+1	; 0x01
    1e34:	82 81       	ldd	r24, Z+2	; 0x02
    1e36:	93 81       	ldd	r25, Z+3	; 0x03
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	40 e8       	ldi	r20, 0x80	; 128
    1e3e:	5f e3       	ldi	r21, 0x3F	; 63
    1e40:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e44:	88 23       	and	r24, r24
    1e46:	44 f4       	brge	.+16     	; 0x1e58 <lcd_data+0x1e8>
		__ticks = 1;
    1e48:	fe 01       	movw	r30, r28
    1e4a:	e2 5b       	subi	r30, 0xB2	; 178
    1e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	91 83       	std	Z+1, r25	; 0x01
    1e54:	80 83       	st	Z, r24
    1e56:	64 c0       	rjmp	.+200    	; 0x1f20 <lcd_data+0x2b0>
	else if (__tmp > 65535)
    1e58:	fe 01       	movw	r30, r28
    1e5a:	e0 5b       	subi	r30, 0xB0	; 176
    1e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5e:	60 81       	ld	r22, Z
    1e60:	71 81       	ldd	r23, Z+1	; 0x01
    1e62:	82 81       	ldd	r24, Z+2	; 0x02
    1e64:	93 81       	ldd	r25, Z+3	; 0x03
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	3f ef       	ldi	r19, 0xFF	; 255
    1e6a:	4f e7       	ldi	r20, 0x7F	; 127
    1e6c:	57 e4       	ldi	r21, 0x47	; 71
    1e6e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e72:	18 16       	cp	r1, r24
    1e74:	0c f0       	brlt	.+2      	; 0x1e78 <lcd_data+0x208>
    1e76:	43 c0       	rjmp	.+134    	; 0x1efe <lcd_data+0x28e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e78:	fe 01       	movw	r30, r28
    1e7a:	ec 5a       	subi	r30, 0xAC	; 172
    1e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7e:	60 81       	ld	r22, Z
    1e80:	71 81       	ldd	r23, Z+1	; 0x01
    1e82:	82 81       	ldd	r24, Z+2	; 0x02
    1e84:	93 81       	ldd	r25, Z+3	; 0x03
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	40 e2       	ldi	r20, 0x20	; 32
    1e8c:	51 e4       	ldi	r21, 0x41	; 65
    1e8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	8e 01       	movw	r16, r28
    1e98:	02 5b       	subi	r16, 0xB2	; 178
    1e9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e9c:	bc 01       	movw	r22, r24
    1e9e:	cd 01       	movw	r24, r26
    1ea0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	f8 01       	movw	r30, r16
    1eaa:	91 83       	std	Z+1, r25	; 0x01
    1eac:	80 83       	st	Z, r24
    1eae:	1f c0       	rjmp	.+62     	; 0x1eee <lcd_data+0x27e>
    1eb0:	fe 01       	movw	r30, r28
    1eb2:	e4 5b       	subi	r30, 0xB4	; 180
    1eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb6:	80 e9       	ldi	r24, 0x90	; 144
    1eb8:	91 e0       	ldi	r25, 0x01	; 1
    1eba:	91 83       	std	Z+1, r25	; 0x01
    1ebc:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	e4 5b       	subi	r30, 0xB4	; 180
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	80 81       	ld	r24, Z
    1ec6:	91 81       	ldd	r25, Z+1	; 0x01
    1ec8:	01 97       	sbiw	r24, 0x01	; 1
    1eca:	f1 f7       	brne	.-4      	; 0x1ec8 <lcd_data+0x258>
    1ecc:	fe 01       	movw	r30, r28
    1ece:	e4 5b       	subi	r30, 0xB4	; 180
    1ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed2:	91 83       	std	Z+1, r25	; 0x01
    1ed4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed6:	de 01       	movw	r26, r28
    1ed8:	a2 5b       	subi	r26, 0xB2	; 178
    1eda:	bf 4f       	sbci	r27, 0xFF	; 255
    1edc:	fe 01       	movw	r30, r28
    1ede:	e2 5b       	subi	r30, 0xB2	; 178
    1ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee2:	80 81       	ld	r24, Z
    1ee4:	91 81       	ldd	r25, Z+1	; 0x01
    1ee6:	01 97       	sbiw	r24, 0x01	; 1
    1ee8:	11 96       	adiw	r26, 0x01	; 1
    1eea:	9c 93       	st	X, r25
    1eec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eee:	fe 01       	movw	r30, r28
    1ef0:	e2 5b       	subi	r30, 0xB2	; 178
    1ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef4:	80 81       	ld	r24, Z
    1ef6:	91 81       	ldd	r25, Z+1	; 0x01
    1ef8:	00 97       	sbiw	r24, 0x00	; 0
    1efa:	d1 f6       	brne	.-76     	; 0x1eb0 <lcd_data+0x240>
    1efc:	4b c0       	rjmp	.+150    	; 0x1f94 <lcd_data+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1efe:	8e 01       	movw	r16, r28
    1f00:	02 5b       	subi	r16, 0xB2	; 178
    1f02:	1f 4f       	sbci	r17, 0xFF	; 255
    1f04:	fe 01       	movw	r30, r28
    1f06:	e0 5b       	subi	r30, 0xB0	; 176
    1f08:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0a:	60 81       	ld	r22, Z
    1f0c:	71 81       	ldd	r23, Z+1	; 0x01
    1f0e:	82 81       	ldd	r24, Z+2	; 0x02
    1f10:	93 81       	ldd	r25, Z+3	; 0x03
    1f12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	f8 01       	movw	r30, r16
    1f1c:	91 83       	std	Z+1, r25	; 0x01
    1f1e:	80 83       	st	Z, r24
    1f20:	de 01       	movw	r26, r28
    1f22:	a6 5b       	subi	r26, 0xB6	; 182
    1f24:	bf 4f       	sbci	r27, 0xFF	; 255
    1f26:	fe 01       	movw	r30, r28
    1f28:	e2 5b       	subi	r30, 0xB2	; 178
    1f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2c:	80 81       	ld	r24, Z
    1f2e:	91 81       	ldd	r25, Z+1	; 0x01
    1f30:	11 96       	adiw	r26, 0x01	; 1
    1f32:	9c 93       	st	X, r25
    1f34:	8e 93       	st	-X, r24
    1f36:	fe 01       	movw	r30, r28
    1f38:	e6 5b       	subi	r30, 0xB6	; 182
    1f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3c:	80 81       	ld	r24, Z
    1f3e:	91 81       	ldd	r25, Z+1	; 0x01
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	f1 f7       	brne	.-4      	; 0x1f40 <lcd_data+0x2d0>
    1f44:	fe 01       	movw	r30, r28
    1f46:	e6 5b       	subi	r30, 0xB6	; 182
    1f48:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4a:	91 83       	std	Z+1, r25	; 0x01
    1f4c:	80 83       	st	Z, r24
    1f4e:	22 c0       	rjmp	.+68     	; 0x1f94 <lcd_data+0x324>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f50:	8e 01       	movw	r16, r28
    1f52:	08 5a       	subi	r16, 0xA8	; 168
    1f54:	1f 4f       	sbci	r17, 0xFF	; 255
    1f56:	fe 01       	movw	r30, r28
    1f58:	e7 5a       	subi	r30, 0xA7	; 167
    1f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5c:	60 81       	ld	r22, Z
    1f5e:	71 81       	ldd	r23, Z+1	; 0x01
    1f60:	82 81       	ldd	r24, Z+2	; 0x02
    1f62:	93 81       	ldd	r25, Z+3	; 0x03
    1f64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	f8 01       	movw	r30, r16
    1f6e:	80 83       	st	Z, r24
    1f70:	de 01       	movw	r26, r28
    1f72:	a7 5b       	subi	r26, 0xB7	; 183
    1f74:	bf 4f       	sbci	r27, 0xFF	; 255
    1f76:	fe 01       	movw	r30, r28
    1f78:	e8 5a       	subi	r30, 0xA8	; 168
    1f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7c:	80 81       	ld	r24, Z
    1f7e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f80:	fe 01       	movw	r30, r28
    1f82:	e7 5b       	subi	r30, 0xB7	; 183
    1f84:	ff 4f       	sbci	r31, 0xFF	; 255
    1f86:	80 81       	ld	r24, Z
    1f88:	8a 95       	dec	r24
    1f8a:	f1 f7       	brne	.-4      	; 0x1f88 <lcd_data+0x318>
    1f8c:	fe 01       	movw	r30, r28
    1f8e:	e7 5b       	subi	r30, 0xB7	; 183
    1f90:	ff 4f       	sbci	r31, 0xFF	; 255
    1f92:	80 83       	st	Z, r24
	_delay_us(10);
	Dio_write(E,Low);
    1f94:	8b e0       	ldi	r24, 0x0B	; 11
    1f96:	60 e0       	ldi	r22, 0x00	; 0
    1f98:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
    1f9c:	fe 01       	movw	r30, r28
    1f9e:	eb 5b       	subi	r30, 0xBB	; 187
    1fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa2:	80 e0       	ldi	r24, 0x00	; 0
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	a8 e4       	ldi	r26, 0x48	; 72
    1fa8:	b3 e4       	ldi	r27, 0x43	; 67
    1faa:	80 83       	st	Z, r24
    1fac:	91 83       	std	Z+1, r25	; 0x01
    1fae:	a2 83       	std	Z+2, r26	; 0x02
    1fb0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fb2:	8e 01       	movw	r16, r28
    1fb4:	0f 5b       	subi	r16, 0xBF	; 191
    1fb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb8:	fe 01       	movw	r30, r28
    1fba:	eb 5b       	subi	r30, 0xBB	; 187
    1fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbe:	60 81       	ld	r22, Z
    1fc0:	71 81       	ldd	r23, Z+1	; 0x01
    1fc2:	82 81       	ldd	r24, Z+2	; 0x02
    1fc4:	93 81       	ldd	r25, Z+3	; 0x03
    1fc6:	2b ea       	ldi	r18, 0xAB	; 171
    1fc8:	3a ea       	ldi	r19, 0xAA	; 170
    1fca:	4a ea       	ldi	r20, 0xAA	; 170
    1fcc:	50 e4       	ldi	r21, 0x40	; 64
    1fce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	f8 01       	movw	r30, r16
    1fd8:	80 83       	st	Z, r24
    1fda:	91 83       	std	Z+1, r25	; 0x01
    1fdc:	a2 83       	std	Z+2, r26	; 0x02
    1fde:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fe0:	fe 01       	movw	r30, r28
    1fe2:	ef 5b       	subi	r30, 0xBF	; 191
    1fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe6:	60 81       	ld	r22, Z
    1fe8:	71 81       	ldd	r23, Z+1	; 0x01
    1fea:	82 81       	ldd	r24, Z+2	; 0x02
    1fec:	93 81       	ldd	r25, Z+3	; 0x03
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	40 e8       	ldi	r20, 0x80	; 128
    1ff4:	5f e3       	ldi	r21, 0x3F	; 63
    1ff6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ffa:	88 23       	and	r24, r24
    1ffc:	34 f4       	brge	.+12     	; 0x200a <lcd_data+0x39a>
		__ticks = 1;
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	fe 01       	movw	r30, r28
    2002:	e0 5c       	subi	r30, 0xC0	; 192
    2004:	ff 4f       	sbci	r31, 0xFF	; 255
    2006:	80 83       	st	Z, r24
    2008:	9d c0       	rjmp	.+314    	; 0x2144 <lcd_data+0x4d4>
	else if (__tmp > 255)
    200a:	fe 01       	movw	r30, r28
    200c:	ef 5b       	subi	r30, 0xBF	; 191
    200e:	ff 4f       	sbci	r31, 0xFF	; 255
    2010:	60 81       	ld	r22, Z
    2012:	71 81       	ldd	r23, Z+1	; 0x01
    2014:	82 81       	ldd	r24, Z+2	; 0x02
    2016:	93 81       	ldd	r25, Z+3	; 0x03
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	4f e7       	ldi	r20, 0x7F	; 127
    201e:	53 e4       	ldi	r21, 0x43	; 67
    2020:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2024:	18 16       	cp	r1, r24
    2026:	0c f0       	brlt	.+2      	; 0x202a <lcd_data+0x3ba>
    2028:	7e c0       	rjmp	.+252    	; 0x2126 <lcd_data+0x4b6>
	{
		_delay_ms(__us / 1000.0);
    202a:	fe 01       	movw	r30, r28
    202c:	eb 5b       	subi	r30, 0xBB	; 187
    202e:	ff 4f       	sbci	r31, 0xFF	; 255
    2030:	60 81       	ld	r22, Z
    2032:	71 81       	ldd	r23, Z+1	; 0x01
    2034:	82 81       	ldd	r24, Z+2	; 0x02
    2036:	93 81       	ldd	r25, Z+3	; 0x03
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	4a e7       	ldi	r20, 0x7A	; 122
    203e:	54 e4       	ldi	r21, 0x44	; 68
    2040:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	8c af       	std	Y+60, r24	; 0x3c
    204a:	9d af       	std	Y+61, r25	; 0x3d
    204c:	ae af       	std	Y+62, r26	; 0x3e
    204e:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2050:	6c ad       	ldd	r22, Y+60	; 0x3c
    2052:	7d ad       	ldd	r23, Y+61	; 0x3d
    2054:	8e ad       	ldd	r24, Y+62	; 0x3e
    2056:	9f ad       	ldd	r25, Y+63	; 0x3f
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	4a e7       	ldi	r20, 0x7A	; 122
    205e:	55 e4       	ldi	r21, 0x45	; 69
    2060:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	88 af       	std	Y+56, r24	; 0x38
    206a:	99 af       	std	Y+57, r25	; 0x39
    206c:	aa af       	std	Y+58, r26	; 0x3a
    206e:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2070:	68 ad       	ldd	r22, Y+56	; 0x38
    2072:	79 ad       	ldd	r23, Y+57	; 0x39
    2074:	8a ad       	ldd	r24, Y+58	; 0x3a
    2076:	9b ad       	ldd	r25, Y+59	; 0x3b
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	40 e8       	ldi	r20, 0x80	; 128
    207e:	5f e3       	ldi	r21, 0x3F	; 63
    2080:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2084:	88 23       	and	r24, r24
    2086:	2c f4       	brge	.+10     	; 0x2092 <lcd_data+0x422>
		__ticks = 1;
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	9f ab       	std	Y+55, r25	; 0x37
    208e:	8e ab       	std	Y+54, r24	; 0x36
    2090:	3f c0       	rjmp	.+126    	; 0x2110 <lcd_data+0x4a0>
	else if (__tmp > 65535)
    2092:	68 ad       	ldd	r22, Y+56	; 0x38
    2094:	79 ad       	ldd	r23, Y+57	; 0x39
    2096:	8a ad       	ldd	r24, Y+58	; 0x3a
    2098:	9b ad       	ldd	r25, Y+59	; 0x3b
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	3f ef       	ldi	r19, 0xFF	; 255
    209e:	4f e7       	ldi	r20, 0x7F	; 127
    20a0:	57 e4       	ldi	r21, 0x47	; 71
    20a2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    20a6:	18 16       	cp	r1, r24
    20a8:	4c f5       	brge	.+82     	; 0x20fc <lcd_data+0x48c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20aa:	6c ad       	ldd	r22, Y+60	; 0x3c
    20ac:	7d ad       	ldd	r23, Y+61	; 0x3d
    20ae:	8e ad       	ldd	r24, Y+62	; 0x3e
    20b0:	9f ad       	ldd	r25, Y+63	; 0x3f
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	40 e2       	ldi	r20, 0x20	; 32
    20b8:	51 e4       	ldi	r21, 0x41	; 65
    20ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	bc 01       	movw	r22, r24
    20c4:	cd 01       	movw	r24, r26
    20c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20ca:	dc 01       	movw	r26, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	9f ab       	std	Y+55, r25	; 0x37
    20d0:	8e ab       	std	Y+54, r24	; 0x36
    20d2:	0f c0       	rjmp	.+30     	; 0x20f2 <lcd_data+0x482>
    20d4:	80 e9       	ldi	r24, 0x90	; 144
    20d6:	91 e0       	ldi	r25, 0x01	; 1
    20d8:	9d ab       	std	Y+53, r25	; 0x35
    20da:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20dc:	8c a9       	ldd	r24, Y+52	; 0x34
    20de:	9d a9       	ldd	r25, Y+53	; 0x35
    20e0:	01 97       	sbiw	r24, 0x01	; 1
    20e2:	f1 f7       	brne	.-4      	; 0x20e0 <lcd_data+0x470>
    20e4:	9d ab       	std	Y+53, r25	; 0x35
    20e6:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e8:	8e a9       	ldd	r24, Y+54	; 0x36
    20ea:	9f a9       	ldd	r25, Y+55	; 0x37
    20ec:	01 97       	sbiw	r24, 0x01	; 1
    20ee:	9f ab       	std	Y+55, r25	; 0x37
    20f0:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f2:	8e a9       	ldd	r24, Y+54	; 0x36
    20f4:	9f a9       	ldd	r25, Y+55	; 0x37
    20f6:	00 97       	sbiw	r24, 0x00	; 0
    20f8:	69 f7       	brne	.-38     	; 0x20d4 <lcd_data+0x464>
    20fa:	2d c0       	rjmp	.+90     	; 0x2156 <lcd_data+0x4e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20fc:	68 ad       	ldd	r22, Y+56	; 0x38
    20fe:	79 ad       	ldd	r23, Y+57	; 0x39
    2100:	8a ad       	ldd	r24, Y+58	; 0x3a
    2102:	9b ad       	ldd	r25, Y+59	; 0x3b
    2104:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2108:	dc 01       	movw	r26, r24
    210a:	cb 01       	movw	r24, r22
    210c:	9f ab       	std	Y+55, r25	; 0x37
    210e:	8e ab       	std	Y+54, r24	; 0x36
    2110:	8e a9       	ldd	r24, Y+54	; 0x36
    2112:	9f a9       	ldd	r25, Y+55	; 0x37
    2114:	9b ab       	std	Y+51, r25	; 0x33
    2116:	8a ab       	std	Y+50, r24	; 0x32
    2118:	8a a9       	ldd	r24, Y+50	; 0x32
    211a:	9b a9       	ldd	r25, Y+51	; 0x33
    211c:	01 97       	sbiw	r24, 0x01	; 1
    211e:	f1 f7       	brne	.-4      	; 0x211c <lcd_data+0x4ac>
    2120:	9b ab       	std	Y+51, r25	; 0x33
    2122:	8a ab       	std	Y+50, r24	; 0x32
    2124:	18 c0       	rjmp	.+48     	; 0x2156 <lcd_data+0x4e6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2126:	fe 01       	movw	r30, r28
    2128:	ef 5b       	subi	r30, 0xBF	; 191
    212a:	ff 4f       	sbci	r31, 0xFF	; 255
    212c:	60 81       	ld	r22, Z
    212e:	71 81       	ldd	r23, Z+1	; 0x01
    2130:	82 81       	ldd	r24, Z+2	; 0x02
    2132:	93 81       	ldd	r25, Z+3	; 0x03
    2134:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	fe 01       	movw	r30, r28
    213e:	e0 5c       	subi	r30, 0xC0	; 192
    2140:	ff 4f       	sbci	r31, 0xFF	; 255
    2142:	80 83       	st	Z, r24
    2144:	fe 01       	movw	r30, r28
    2146:	e0 5c       	subi	r30, 0xC0	; 192
    2148:	ff 4f       	sbci	r31, 0xFF	; 255
    214a:	80 81       	ld	r24, Z
    214c:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    214e:	89 a9       	ldd	r24, Y+49	; 0x31
    2150:	8a 95       	dec	r24
    2152:	f1 f7       	brne	.-4      	; 0x2150 <lcd_data+0x4e0>
    2154:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(200);

	if(GET_BIT(data,7)){ Dio_write(D7,High);}else{ Dio_write(D7,Low);}
    2156:	fe 01       	movw	r30, r28
    2158:	ef 59       	subi	r30, 0x9F	; 159
    215a:	ff 4f       	sbci	r31, 0xFF	; 255
    215c:	80 81       	ld	r24, Z
    215e:	88 23       	and	r24, r24
    2160:	2c f4       	brge	.+10     	; 0x216c <lcd_data+0x4fc>
    2162:	87 e0       	ldi	r24, 0x07	; 7
    2164:	61 e0       	ldi	r22, 0x01	; 1
    2166:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
    216a:	04 c0       	rjmp	.+8      	; 0x2174 <lcd_data+0x504>
    216c:	87 e0       	ldi	r24, 0x07	; 7
    216e:	60 e0       	ldi	r22, 0x00	; 0
    2170:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
	if(GET_BIT(data,6)){ Dio_write(D6,High);}else{ Dio_write(D6,Low);}
    2174:	fe 01       	movw	r30, r28
    2176:	ef 59       	subi	r30, 0x9F	; 159
    2178:	ff 4f       	sbci	r31, 0xFF	; 255
    217a:	80 81       	ld	r24, Z
    217c:	88 2f       	mov	r24, r24
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	80 74       	andi	r24, 0x40	; 64
    2182:	90 70       	andi	r25, 0x00	; 0
    2184:	00 97       	sbiw	r24, 0x00	; 0
    2186:	29 f0       	breq	.+10     	; 0x2192 <lcd_data+0x522>
    2188:	86 e0       	ldi	r24, 0x06	; 6
    218a:	61 e0       	ldi	r22, 0x01	; 1
    218c:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
    2190:	04 c0       	rjmp	.+8      	; 0x219a <lcd_data+0x52a>
    2192:	86 e0       	ldi	r24, 0x06	; 6
    2194:	60 e0       	ldi	r22, 0x00	; 0
    2196:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
	if(GET_BIT(data,5)){ Dio_write(D5,High);}else{ Dio_write(D5,Low);}
    219a:	fe 01       	movw	r30, r28
    219c:	ef 59       	subi	r30, 0x9F	; 159
    219e:	ff 4f       	sbci	r31, 0xFF	; 255
    21a0:	80 81       	ld	r24, Z
    21a2:	88 2f       	mov	r24, r24
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	80 72       	andi	r24, 0x20	; 32
    21a8:	90 70       	andi	r25, 0x00	; 0
    21aa:	00 97       	sbiw	r24, 0x00	; 0
    21ac:	29 f0       	breq	.+10     	; 0x21b8 <lcd_data+0x548>
    21ae:	85 e0       	ldi	r24, 0x05	; 5
    21b0:	61 e0       	ldi	r22, 0x01	; 1
    21b2:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
    21b6:	04 c0       	rjmp	.+8      	; 0x21c0 <lcd_data+0x550>
    21b8:	85 e0       	ldi	r24, 0x05	; 5
    21ba:	60 e0       	ldi	r22, 0x00	; 0
    21bc:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
	if(GET_BIT(data,4)){ Dio_write(D4,High);}else{ Dio_write(D4,Low);}
    21c0:	fe 01       	movw	r30, r28
    21c2:	ef 59       	subi	r30, 0x9F	; 159
    21c4:	ff 4f       	sbci	r31, 0xFF	; 255
    21c6:	80 81       	ld	r24, Z
    21c8:	88 2f       	mov	r24, r24
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	80 71       	andi	r24, 0x10	; 16
    21ce:	90 70       	andi	r25, 0x00	; 0
    21d0:	00 97       	sbiw	r24, 0x00	; 0
    21d2:	29 f0       	breq	.+10     	; 0x21de <lcd_data+0x56e>
    21d4:	84 e0       	ldi	r24, 0x04	; 4
    21d6:	61 e0       	ldi	r22, 0x01	; 1
    21d8:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
    21dc:	04 c0       	rjmp	.+8      	; 0x21e6 <lcd_data+0x576>
    21de:	84 e0       	ldi	r24, 0x04	; 4
    21e0:	60 e0       	ldi	r22, 0x00	; 0
    21e2:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>

	Dio_write(E,High);
    21e6:	8b e0       	ldi	r24, 0x0B	; 11
    21e8:	61 e0       	ldi	r22, 0x01	; 1
    21ea:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
    21ee:	80 e0       	ldi	r24, 0x00	; 0
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	a0 e2       	ldi	r26, 0x20	; 32
    21f4:	b1 e4       	ldi	r27, 0x41	; 65
    21f6:	8d a7       	std	Y+45, r24	; 0x2d
    21f8:	9e a7       	std	Y+46, r25	; 0x2e
    21fa:	af a7       	std	Y+47, r26	; 0x2f
    21fc:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21fe:	6d a5       	ldd	r22, Y+45	; 0x2d
    2200:	7e a5       	ldd	r23, Y+46	; 0x2e
    2202:	8f a5       	ldd	r24, Y+47	; 0x2f
    2204:	98 a9       	ldd	r25, Y+48	; 0x30
    2206:	2b ea       	ldi	r18, 0xAB	; 171
    2208:	3a ea       	ldi	r19, 0xAA	; 170
    220a:	4a ea       	ldi	r20, 0xAA	; 170
    220c:	50 e4       	ldi	r21, 0x40	; 64
    220e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	89 a7       	std	Y+41, r24	; 0x29
    2218:	9a a7       	std	Y+42, r25	; 0x2a
    221a:	ab a7       	std	Y+43, r26	; 0x2b
    221c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    221e:	69 a5       	ldd	r22, Y+41	; 0x29
    2220:	7a a5       	ldd	r23, Y+42	; 0x2a
    2222:	8b a5       	ldd	r24, Y+43	; 0x2b
    2224:	9c a5       	ldd	r25, Y+44	; 0x2c
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	40 e8       	ldi	r20, 0x80	; 128
    222c:	5f e3       	ldi	r21, 0x3F	; 63
    222e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2232:	88 23       	and	r24, r24
    2234:	1c f4       	brge	.+6      	; 0x223c <lcd_data+0x5cc>
		__ticks = 1;
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	88 a7       	std	Y+40, r24	; 0x28
    223a:	91 c0       	rjmp	.+290    	; 0x235e <lcd_data+0x6ee>
	else if (__tmp > 255)
    223c:	69 a5       	ldd	r22, Y+41	; 0x29
    223e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2240:	8b a5       	ldd	r24, Y+43	; 0x2b
    2242:	9c a5       	ldd	r25, Y+44	; 0x2c
    2244:	20 e0       	ldi	r18, 0x00	; 0
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	4f e7       	ldi	r20, 0x7F	; 127
    224a:	53 e4       	ldi	r21, 0x43	; 67
    224c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2250:	18 16       	cp	r1, r24
    2252:	0c f0       	brlt	.+2      	; 0x2256 <lcd_data+0x5e6>
    2254:	7b c0       	rjmp	.+246    	; 0x234c <lcd_data+0x6dc>
	{
		_delay_ms(__us / 1000.0);
    2256:	6d a5       	ldd	r22, Y+45	; 0x2d
    2258:	7e a5       	ldd	r23, Y+46	; 0x2e
    225a:	8f a5       	ldd	r24, Y+47	; 0x2f
    225c:	98 a9       	ldd	r25, Y+48	; 0x30
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	4a e7       	ldi	r20, 0x7A	; 122
    2264:	54 e4       	ldi	r21, 0x44	; 68
    2266:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	8c a3       	std	Y+36, r24	; 0x24
    2270:	9d a3       	std	Y+37, r25	; 0x25
    2272:	ae a3       	std	Y+38, r26	; 0x26
    2274:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2276:	6c a1       	ldd	r22, Y+36	; 0x24
    2278:	7d a1       	ldd	r23, Y+37	; 0x25
    227a:	8e a1       	ldd	r24, Y+38	; 0x26
    227c:	9f a1       	ldd	r25, Y+39	; 0x27
    227e:	20 e0       	ldi	r18, 0x00	; 0
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	4a e7       	ldi	r20, 0x7A	; 122
    2284:	55 e4       	ldi	r21, 0x45	; 69
    2286:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	88 a3       	std	Y+32, r24	; 0x20
    2290:	99 a3       	std	Y+33, r25	; 0x21
    2292:	aa a3       	std	Y+34, r26	; 0x22
    2294:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2296:	68 a1       	ldd	r22, Y+32	; 0x20
    2298:	79 a1       	ldd	r23, Y+33	; 0x21
    229a:	8a a1       	ldd	r24, Y+34	; 0x22
    229c:	9b a1       	ldd	r25, Y+35	; 0x23
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	40 e8       	ldi	r20, 0x80	; 128
    22a4:	5f e3       	ldi	r21, 0x3F	; 63
    22a6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    22aa:	88 23       	and	r24, r24
    22ac:	2c f4       	brge	.+10     	; 0x22b8 <lcd_data+0x648>
		__ticks = 1;
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	9f 8f       	std	Y+31, r25	; 0x1f
    22b4:	8e 8f       	std	Y+30, r24	; 0x1e
    22b6:	3f c0       	rjmp	.+126    	; 0x2336 <lcd_data+0x6c6>
	else if (__tmp > 65535)
    22b8:	68 a1       	ldd	r22, Y+32	; 0x20
    22ba:	79 a1       	ldd	r23, Y+33	; 0x21
    22bc:	8a a1       	ldd	r24, Y+34	; 0x22
    22be:	9b a1       	ldd	r25, Y+35	; 0x23
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	3f ef       	ldi	r19, 0xFF	; 255
    22c4:	4f e7       	ldi	r20, 0x7F	; 127
    22c6:	57 e4       	ldi	r21, 0x47	; 71
    22c8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    22cc:	18 16       	cp	r1, r24
    22ce:	4c f5       	brge	.+82     	; 0x2322 <lcd_data+0x6b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22d0:	6c a1       	ldd	r22, Y+36	; 0x24
    22d2:	7d a1       	ldd	r23, Y+37	; 0x25
    22d4:	8e a1       	ldd	r24, Y+38	; 0x26
    22d6:	9f a1       	ldd	r25, Y+39	; 0x27
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	40 e2       	ldi	r20, 0x20	; 32
    22de:	51 e4       	ldi	r21, 0x41	; 65
    22e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	bc 01       	movw	r22, r24
    22ea:	cd 01       	movw	r24, r26
    22ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	9f 8f       	std	Y+31, r25	; 0x1f
    22f6:	8e 8f       	std	Y+30, r24	; 0x1e
    22f8:	0f c0       	rjmp	.+30     	; 0x2318 <lcd_data+0x6a8>
    22fa:	80 e9       	ldi	r24, 0x90	; 144
    22fc:	91 e0       	ldi	r25, 0x01	; 1
    22fe:	9d 8f       	std	Y+29, r25	; 0x1d
    2300:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2302:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2304:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2306:	01 97       	sbiw	r24, 0x01	; 1
    2308:	f1 f7       	brne	.-4      	; 0x2306 <lcd_data+0x696>
    230a:	9d 8f       	std	Y+29, r25	; 0x1d
    230c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    230e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2310:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2312:	01 97       	sbiw	r24, 0x01	; 1
    2314:	9f 8f       	std	Y+31, r25	; 0x1f
    2316:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2318:	8e 8d       	ldd	r24, Y+30	; 0x1e
    231a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    231c:	00 97       	sbiw	r24, 0x00	; 0
    231e:	69 f7       	brne	.-38     	; 0x22fa <lcd_data+0x68a>
    2320:	24 c0       	rjmp	.+72     	; 0x236a <lcd_data+0x6fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2322:	68 a1       	ldd	r22, Y+32	; 0x20
    2324:	79 a1       	ldd	r23, Y+33	; 0x21
    2326:	8a a1       	ldd	r24, Y+34	; 0x22
    2328:	9b a1       	ldd	r25, Y+35	; 0x23
    232a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	9f 8f       	std	Y+31, r25	; 0x1f
    2334:	8e 8f       	std	Y+30, r24	; 0x1e
    2336:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2338:	9f 8d       	ldd	r25, Y+31	; 0x1f
    233a:	9b 8f       	std	Y+27, r25	; 0x1b
    233c:	8a 8f       	std	Y+26, r24	; 0x1a
    233e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2340:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2342:	01 97       	sbiw	r24, 0x01	; 1
    2344:	f1 f7       	brne	.-4      	; 0x2342 <lcd_data+0x6d2>
    2346:	9b 8f       	std	Y+27, r25	; 0x1b
    2348:	8a 8f       	std	Y+26, r24	; 0x1a
    234a:	0f c0       	rjmp	.+30     	; 0x236a <lcd_data+0x6fa>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    234c:	69 a5       	ldd	r22, Y+41	; 0x29
    234e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2350:	8b a5       	ldd	r24, Y+43	; 0x2b
    2352:	9c a5       	ldd	r25, Y+44	; 0x2c
    2354:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2358:	dc 01       	movw	r26, r24
    235a:	cb 01       	movw	r24, r22
    235c:	88 a7       	std	Y+40, r24	; 0x28
    235e:	88 a5       	ldd	r24, Y+40	; 0x28
    2360:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2362:	89 8d       	ldd	r24, Y+25	; 0x19
    2364:	8a 95       	dec	r24
    2366:	f1 f7       	brne	.-4      	; 0x2364 <lcd_data+0x6f4>
    2368:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	Dio_write(E,Low);
    236a:	8b e0       	ldi	r24, 0x0B	; 11
    236c:	60 e0       	ldi	r22, 0x00	; 0
    236e:	0e 94 70 06 	call	0xce0	; 0xce0 <Dio_write>
    2372:	80 e0       	ldi	r24, 0x00	; 0
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	a8 e4       	ldi	r26, 0x48	; 72
    2378:	b3 e4       	ldi	r27, 0x43	; 67
    237a:	8d 8b       	std	Y+21, r24	; 0x15
    237c:	9e 8b       	std	Y+22, r25	; 0x16
    237e:	af 8b       	std	Y+23, r26	; 0x17
    2380:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2382:	6d 89       	ldd	r22, Y+21	; 0x15
    2384:	7e 89       	ldd	r23, Y+22	; 0x16
    2386:	8f 89       	ldd	r24, Y+23	; 0x17
    2388:	98 8d       	ldd	r25, Y+24	; 0x18
    238a:	2b ea       	ldi	r18, 0xAB	; 171
    238c:	3a ea       	ldi	r19, 0xAA	; 170
    238e:	4a ea       	ldi	r20, 0xAA	; 170
    2390:	50 e4       	ldi	r21, 0x40	; 64
    2392:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	89 8b       	std	Y+17, r24	; 0x11
    239c:	9a 8b       	std	Y+18, r25	; 0x12
    239e:	ab 8b       	std	Y+19, r26	; 0x13
    23a0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    23a2:	69 89       	ldd	r22, Y+17	; 0x11
    23a4:	7a 89       	ldd	r23, Y+18	; 0x12
    23a6:	8b 89       	ldd	r24, Y+19	; 0x13
    23a8:	9c 89       	ldd	r25, Y+20	; 0x14
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	40 e8       	ldi	r20, 0x80	; 128
    23b0:	5f e3       	ldi	r21, 0x3F	; 63
    23b2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    23b6:	88 23       	and	r24, r24
    23b8:	1c f4       	brge	.+6      	; 0x23c0 <lcd_data+0x750>
		__ticks = 1;
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	88 8b       	std	Y+16, r24	; 0x10
    23be:	91 c0       	rjmp	.+290    	; 0x24e2 <lcd_data+0x872>
	else if (__tmp > 255)
    23c0:	69 89       	ldd	r22, Y+17	; 0x11
    23c2:	7a 89       	ldd	r23, Y+18	; 0x12
    23c4:	8b 89       	ldd	r24, Y+19	; 0x13
    23c6:	9c 89       	ldd	r25, Y+20	; 0x14
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	4f e7       	ldi	r20, 0x7F	; 127
    23ce:	53 e4       	ldi	r21, 0x43	; 67
    23d0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    23d4:	18 16       	cp	r1, r24
    23d6:	0c f0       	brlt	.+2      	; 0x23da <lcd_data+0x76a>
    23d8:	7b c0       	rjmp	.+246    	; 0x24d0 <lcd_data+0x860>
	{
		_delay_ms(__us / 1000.0);
    23da:	6d 89       	ldd	r22, Y+21	; 0x15
    23dc:	7e 89       	ldd	r23, Y+22	; 0x16
    23de:	8f 89       	ldd	r24, Y+23	; 0x17
    23e0:	98 8d       	ldd	r25, Y+24	; 0x18
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	4a e7       	ldi	r20, 0x7A	; 122
    23e8:	54 e4       	ldi	r21, 0x44	; 68
    23ea:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	8c 87       	std	Y+12, r24	; 0x0c
    23f4:	9d 87       	std	Y+13, r25	; 0x0d
    23f6:	ae 87       	std	Y+14, r26	; 0x0e
    23f8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23fa:	6c 85       	ldd	r22, Y+12	; 0x0c
    23fc:	7d 85       	ldd	r23, Y+13	; 0x0d
    23fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    2400:	9f 85       	ldd	r25, Y+15	; 0x0f
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	4a e7       	ldi	r20, 0x7A	; 122
    2408:	55 e4       	ldi	r21, 0x45	; 69
    240a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	88 87       	std	Y+8, r24	; 0x08
    2414:	99 87       	std	Y+9, r25	; 0x09
    2416:	aa 87       	std	Y+10, r26	; 0x0a
    2418:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    241a:	68 85       	ldd	r22, Y+8	; 0x08
    241c:	79 85       	ldd	r23, Y+9	; 0x09
    241e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2420:	9b 85       	ldd	r25, Y+11	; 0x0b
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	40 e8       	ldi	r20, 0x80	; 128
    2428:	5f e3       	ldi	r21, 0x3F	; 63
    242a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    242e:	88 23       	and	r24, r24
    2430:	2c f4       	brge	.+10     	; 0x243c <lcd_data+0x7cc>
		__ticks = 1;
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	9f 83       	std	Y+7, r25	; 0x07
    2438:	8e 83       	std	Y+6, r24	; 0x06
    243a:	3f c0       	rjmp	.+126    	; 0x24ba <lcd_data+0x84a>
	else if (__tmp > 65535)
    243c:	68 85       	ldd	r22, Y+8	; 0x08
    243e:	79 85       	ldd	r23, Y+9	; 0x09
    2440:	8a 85       	ldd	r24, Y+10	; 0x0a
    2442:	9b 85       	ldd	r25, Y+11	; 0x0b
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	3f ef       	ldi	r19, 0xFF	; 255
    2448:	4f e7       	ldi	r20, 0x7F	; 127
    244a:	57 e4       	ldi	r21, 0x47	; 71
    244c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2450:	18 16       	cp	r1, r24
    2452:	4c f5       	brge	.+82     	; 0x24a6 <lcd_data+0x836>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2454:	6c 85       	ldd	r22, Y+12	; 0x0c
    2456:	7d 85       	ldd	r23, Y+13	; 0x0d
    2458:	8e 85       	ldd	r24, Y+14	; 0x0e
    245a:	9f 85       	ldd	r25, Y+15	; 0x0f
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	40 e2       	ldi	r20, 0x20	; 32
    2462:	51 e4       	ldi	r21, 0x41	; 65
    2464:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	bc 01       	movw	r22, r24
    246e:	cd 01       	movw	r24, r26
    2470:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2474:	dc 01       	movw	r26, r24
    2476:	cb 01       	movw	r24, r22
    2478:	9f 83       	std	Y+7, r25	; 0x07
    247a:	8e 83       	std	Y+6, r24	; 0x06
    247c:	0f c0       	rjmp	.+30     	; 0x249c <lcd_data+0x82c>
    247e:	80 e9       	ldi	r24, 0x90	; 144
    2480:	91 e0       	ldi	r25, 0x01	; 1
    2482:	9d 83       	std	Y+5, r25	; 0x05
    2484:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2486:	8c 81       	ldd	r24, Y+4	; 0x04
    2488:	9d 81       	ldd	r25, Y+5	; 0x05
    248a:	01 97       	sbiw	r24, 0x01	; 1
    248c:	f1 f7       	brne	.-4      	; 0x248a <lcd_data+0x81a>
    248e:	9d 83       	std	Y+5, r25	; 0x05
    2490:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2492:	8e 81       	ldd	r24, Y+6	; 0x06
    2494:	9f 81       	ldd	r25, Y+7	; 0x07
    2496:	01 97       	sbiw	r24, 0x01	; 1
    2498:	9f 83       	std	Y+7, r25	; 0x07
    249a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    249c:	8e 81       	ldd	r24, Y+6	; 0x06
    249e:	9f 81       	ldd	r25, Y+7	; 0x07
    24a0:	00 97       	sbiw	r24, 0x00	; 0
    24a2:	69 f7       	brne	.-38     	; 0x247e <lcd_data+0x80e>
    24a4:	24 c0       	rjmp	.+72     	; 0x24ee <lcd_data+0x87e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24a6:	68 85       	ldd	r22, Y+8	; 0x08
    24a8:	79 85       	ldd	r23, Y+9	; 0x09
    24aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    24ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    24ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24b2:	dc 01       	movw	r26, r24
    24b4:	cb 01       	movw	r24, r22
    24b6:	9f 83       	std	Y+7, r25	; 0x07
    24b8:	8e 83       	std	Y+6, r24	; 0x06
    24ba:	8e 81       	ldd	r24, Y+6	; 0x06
    24bc:	9f 81       	ldd	r25, Y+7	; 0x07
    24be:	9b 83       	std	Y+3, r25	; 0x03
    24c0:	8a 83       	std	Y+2, r24	; 0x02
    24c2:	8a 81       	ldd	r24, Y+2	; 0x02
    24c4:	9b 81       	ldd	r25, Y+3	; 0x03
    24c6:	01 97       	sbiw	r24, 0x01	; 1
    24c8:	f1 f7       	brne	.-4      	; 0x24c6 <lcd_data+0x856>
    24ca:	9b 83       	std	Y+3, r25	; 0x03
    24cc:	8a 83       	std	Y+2, r24	; 0x02
    24ce:	0f c0       	rjmp	.+30     	; 0x24ee <lcd_data+0x87e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    24d0:	69 89       	ldd	r22, Y+17	; 0x11
    24d2:	7a 89       	ldd	r23, Y+18	; 0x12
    24d4:	8b 89       	ldd	r24, Y+19	; 0x13
    24d6:	9c 89       	ldd	r25, Y+20	; 0x14
    24d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	88 8b       	std	Y+16, r24	; 0x10
    24e2:	88 89       	ldd	r24, Y+16	; 0x10
    24e4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    24e6:	89 81       	ldd	r24, Y+1	; 0x01
    24e8:	8a 95       	dec	r24
    24ea:	f1 f7       	brne	.-4      	; 0x24e8 <lcd_data+0x878>
    24ec:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(200);
}
    24ee:	cf 59       	subi	r28, 0x9F	; 159
    24f0:	df 4f       	sbci	r29, 0xFF	; 255
    24f2:	0f b6       	in	r0, 0x3f	; 63
    24f4:	f8 94       	cli
    24f6:	de bf       	out	0x3e, r29	; 62
    24f8:	0f be       	out	0x3f, r0	; 63
    24fa:	cd bf       	out	0x3d, r28	; 61
    24fc:	cf 91       	pop	r28
    24fe:	df 91       	pop	r29
    2500:	1f 91       	pop	r17
    2502:	0f 91       	pop	r16
    2504:	08 95       	ret

00002506 <main>:
#include <avr/interrupt.h>
#include "MCAL/SPI/master/master.h"
#include "HAL/UART/uart.h"


int main(){
    2506:	df 93       	push	r29
    2508:	cf 93       	push	r28
    250a:	cd b7       	in	r28, 0x3d	; 61
    250c:	de b7       	in	r29, 0x3e	; 62
    250e:	6d 97       	sbiw	r28, 0x1d	; 29
    2510:	0f b6       	in	r0, 0x3f	; 63
    2512:	f8 94       	cli
    2514:	de bf       	out	0x3e, r29	; 62
    2516:	0f be       	out	0x3f, r0	; 63
    2518:	cd bf       	out	0x3d, r28	; 61
	//initialize DIO
	Dio_init();
    251a:	0e 94 9c 07 	call	0xf38	; 0xf38 <Dio_init>

	//initialize SPI
	SPI_MasterInit();
    251e:	0e 94 47 06 	call	0xc8e	; 0xc8e <SPI_MasterInit>

	//initialize UART
	UART_init(103);
    2522:	87 e6       	ldi	r24, 0x67	; 103
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	0e 94 0d 09 	call	0x121a	; 0x121a <UART_init>
    252a:	80 e0       	ldi	r24, 0x00	; 0
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	a0 e2       	ldi	r26, 0x20	; 32
    2530:	b1 e4       	ldi	r27, 0x41	; 65
    2532:	89 8f       	std	Y+25, r24	; 0x19
    2534:	9a 8f       	std	Y+26, r25	; 0x1a
    2536:	ab 8f       	std	Y+27, r26	; 0x1b
    2538:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    253a:	69 8d       	ldd	r22, Y+25	; 0x19
    253c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    253e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2540:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	4a e7       	ldi	r20, 0x7A	; 122
    2548:	55 e4       	ldi	r21, 0x45	; 69
    254a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	8d 8b       	std	Y+21, r24	; 0x15
    2554:	9e 8b       	std	Y+22, r25	; 0x16
    2556:	af 8b       	std	Y+23, r26	; 0x17
    2558:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    255a:	6d 89       	ldd	r22, Y+21	; 0x15
    255c:	7e 89       	ldd	r23, Y+22	; 0x16
    255e:	8f 89       	ldd	r24, Y+23	; 0x17
    2560:	98 8d       	ldd	r25, Y+24	; 0x18
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	40 e8       	ldi	r20, 0x80	; 128
    2568:	5f e3       	ldi	r21, 0x3F	; 63
    256a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    256e:	88 23       	and	r24, r24
    2570:	2c f4       	brge	.+10     	; 0x257c <main+0x76>
		__ticks = 1;
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	9c 8b       	std	Y+20, r25	; 0x14
    2578:	8b 8b       	std	Y+19, r24	; 0x13
    257a:	3f c0       	rjmp	.+126    	; 0x25fa <main+0xf4>
	else if (__tmp > 65535)
    257c:	6d 89       	ldd	r22, Y+21	; 0x15
    257e:	7e 89       	ldd	r23, Y+22	; 0x16
    2580:	8f 89       	ldd	r24, Y+23	; 0x17
    2582:	98 8d       	ldd	r25, Y+24	; 0x18
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	3f ef       	ldi	r19, 0xFF	; 255
    2588:	4f e7       	ldi	r20, 0x7F	; 127
    258a:	57 e4       	ldi	r21, 0x47	; 71
    258c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2590:	18 16       	cp	r1, r24
    2592:	4c f5       	brge	.+82     	; 0x25e6 <main+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2594:	69 8d       	ldd	r22, Y+25	; 0x19
    2596:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2598:	8b 8d       	ldd	r24, Y+27	; 0x1b
    259a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	40 e2       	ldi	r20, 0x20	; 32
    25a2:	51 e4       	ldi	r21, 0x41	; 65
    25a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	bc 01       	movw	r22, r24
    25ae:	cd 01       	movw	r24, r26
    25b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25b4:	dc 01       	movw	r26, r24
    25b6:	cb 01       	movw	r24, r22
    25b8:	9c 8b       	std	Y+20, r25	; 0x14
    25ba:	8b 8b       	std	Y+19, r24	; 0x13
    25bc:	0f c0       	rjmp	.+30     	; 0x25dc <main+0xd6>
    25be:	80 e9       	ldi	r24, 0x90	; 144
    25c0:	91 e0       	ldi	r25, 0x01	; 1
    25c2:	9a 8b       	std	Y+18, r25	; 0x12
    25c4:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25c6:	89 89       	ldd	r24, Y+17	; 0x11
    25c8:	9a 89       	ldd	r25, Y+18	; 0x12
    25ca:	01 97       	sbiw	r24, 0x01	; 1
    25cc:	f1 f7       	brne	.-4      	; 0x25ca <main+0xc4>
    25ce:	9a 8b       	std	Y+18, r25	; 0x12
    25d0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d2:	8b 89       	ldd	r24, Y+19	; 0x13
    25d4:	9c 89       	ldd	r25, Y+20	; 0x14
    25d6:	01 97       	sbiw	r24, 0x01	; 1
    25d8:	9c 8b       	std	Y+20, r25	; 0x14
    25da:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25dc:	8b 89       	ldd	r24, Y+19	; 0x13
    25de:	9c 89       	ldd	r25, Y+20	; 0x14
    25e0:	00 97       	sbiw	r24, 0x00	; 0
    25e2:	69 f7       	brne	.-38     	; 0x25be <main+0xb8>
    25e4:	14 c0       	rjmp	.+40     	; 0x260e <main+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e6:	6d 89       	ldd	r22, Y+21	; 0x15
    25e8:	7e 89       	ldd	r23, Y+22	; 0x16
    25ea:	8f 89       	ldd	r24, Y+23	; 0x17
    25ec:	98 8d       	ldd	r25, Y+24	; 0x18
    25ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25f2:	dc 01       	movw	r26, r24
    25f4:	cb 01       	movw	r24, r22
    25f6:	9c 8b       	std	Y+20, r25	; 0x14
    25f8:	8b 8b       	std	Y+19, r24	; 0x13
    25fa:	8b 89       	ldd	r24, Y+19	; 0x13
    25fc:	9c 89       	ldd	r25, Y+20	; 0x14
    25fe:	98 8b       	std	Y+16, r25	; 0x10
    2600:	8f 87       	std	Y+15, r24	; 0x0f
    2602:	8f 85       	ldd	r24, Y+15	; 0x0f
    2604:	98 89       	ldd	r25, Y+16	; 0x10
    2606:	01 97       	sbiw	r24, 0x01	; 1
    2608:	f1 f7       	brne	.-4      	; 0x2606 <main+0x100>
    260a:	98 8b       	std	Y+16, r25	; 0x10
    260c:	8f 87       	std	Y+15, r24	; 0x0f

	while(1){
		_delay_ms(10);
		//receive data from bluetooth device and store it
		unsigned char data = UART_recieve();
    260e:	0e 94 43 09 	call	0x1286	; 0x1286 <UART_recieve>
    2612:	8d 8f       	std	Y+29, r24	; 0x1d

		//send data received from the bluetooth device via SPI
		SPI_MasterTransmit(data);
    2614:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2616:	0e 94 52 06 	call	0xca4	; 0xca4 <SPI_MasterTransmit>
    261a:	80 e0       	ldi	r24, 0x00	; 0
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	a0 e2       	ldi	r26, 0x20	; 32
    2620:	b1 e4       	ldi	r27, 0x41	; 65
    2622:	8b 87       	std	Y+11, r24	; 0x0b
    2624:	9c 87       	std	Y+12, r25	; 0x0c
    2626:	ad 87       	std	Y+13, r26	; 0x0d
    2628:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    262a:	6b 85       	ldd	r22, Y+11	; 0x0b
    262c:	7c 85       	ldd	r23, Y+12	; 0x0c
    262e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2630:	9e 85       	ldd	r25, Y+14	; 0x0e
    2632:	20 e0       	ldi	r18, 0x00	; 0
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	4a e7       	ldi	r20, 0x7A	; 122
    2638:	55 e4       	ldi	r21, 0x45	; 69
    263a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    263e:	dc 01       	movw	r26, r24
    2640:	cb 01       	movw	r24, r22
    2642:	8f 83       	std	Y+7, r24	; 0x07
    2644:	98 87       	std	Y+8, r25	; 0x08
    2646:	a9 87       	std	Y+9, r26	; 0x09
    2648:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    264a:	6f 81       	ldd	r22, Y+7	; 0x07
    264c:	78 85       	ldd	r23, Y+8	; 0x08
    264e:	89 85       	ldd	r24, Y+9	; 0x09
    2650:	9a 85       	ldd	r25, Y+10	; 0x0a
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	40 e8       	ldi	r20, 0x80	; 128
    2658:	5f e3       	ldi	r21, 0x3F	; 63
    265a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    265e:	88 23       	and	r24, r24
    2660:	2c f4       	brge	.+10     	; 0x266c <main+0x166>
		__ticks = 1;
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	9e 83       	std	Y+6, r25	; 0x06
    2668:	8d 83       	std	Y+5, r24	; 0x05
    266a:	3f c0       	rjmp	.+126    	; 0x26ea <main+0x1e4>
	else if (__tmp > 65535)
    266c:	6f 81       	ldd	r22, Y+7	; 0x07
    266e:	78 85       	ldd	r23, Y+8	; 0x08
    2670:	89 85       	ldd	r24, Y+9	; 0x09
    2672:	9a 85       	ldd	r25, Y+10	; 0x0a
    2674:	20 e0       	ldi	r18, 0x00	; 0
    2676:	3f ef       	ldi	r19, 0xFF	; 255
    2678:	4f e7       	ldi	r20, 0x7F	; 127
    267a:	57 e4       	ldi	r21, 0x47	; 71
    267c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2680:	18 16       	cp	r1, r24
    2682:	4c f5       	brge	.+82     	; 0x26d6 <main+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2684:	6b 85       	ldd	r22, Y+11	; 0x0b
    2686:	7c 85       	ldd	r23, Y+12	; 0x0c
    2688:	8d 85       	ldd	r24, Y+13	; 0x0d
    268a:	9e 85       	ldd	r25, Y+14	; 0x0e
    268c:	20 e0       	ldi	r18, 0x00	; 0
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	40 e2       	ldi	r20, 0x20	; 32
    2692:	51 e4       	ldi	r21, 0x41	; 65
    2694:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	bc 01       	movw	r22, r24
    269e:	cd 01       	movw	r24, r26
    26a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	9e 83       	std	Y+6, r25	; 0x06
    26aa:	8d 83       	std	Y+5, r24	; 0x05
    26ac:	0f c0       	rjmp	.+30     	; 0x26cc <main+0x1c6>
    26ae:	80 e9       	ldi	r24, 0x90	; 144
    26b0:	91 e0       	ldi	r25, 0x01	; 1
    26b2:	9c 83       	std	Y+4, r25	; 0x04
    26b4:	8b 83       	std	Y+3, r24	; 0x03
    26b6:	8b 81       	ldd	r24, Y+3	; 0x03
    26b8:	9c 81       	ldd	r25, Y+4	; 0x04
    26ba:	01 97       	sbiw	r24, 0x01	; 1
    26bc:	f1 f7       	brne	.-4      	; 0x26ba <main+0x1b4>
    26be:	9c 83       	std	Y+4, r25	; 0x04
    26c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26c2:	8d 81       	ldd	r24, Y+5	; 0x05
    26c4:	9e 81       	ldd	r25, Y+6	; 0x06
    26c6:	01 97       	sbiw	r24, 0x01	; 1
    26c8:	9e 83       	std	Y+6, r25	; 0x06
    26ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26cc:	8d 81       	ldd	r24, Y+5	; 0x05
    26ce:	9e 81       	ldd	r25, Y+6	; 0x06
    26d0:	00 97       	sbiw	r24, 0x00	; 0
    26d2:	69 f7       	brne	.-38     	; 0x26ae <main+0x1a8>
    26d4:	2a cf       	rjmp	.-428    	; 0x252a <main+0x24>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d6:	6f 81       	ldd	r22, Y+7	; 0x07
    26d8:	78 85       	ldd	r23, Y+8	; 0x08
    26da:	89 85       	ldd	r24, Y+9	; 0x09
    26dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    26de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26e2:	dc 01       	movw	r26, r24
    26e4:	cb 01       	movw	r24, r22
    26e6:	9e 83       	std	Y+6, r25	; 0x06
    26e8:	8d 83       	std	Y+5, r24	; 0x05
    26ea:	8d 81       	ldd	r24, Y+5	; 0x05
    26ec:	9e 81       	ldd	r25, Y+6	; 0x06
    26ee:	9a 83       	std	Y+2, r25	; 0x02
    26f0:	89 83       	std	Y+1, r24	; 0x01
    26f2:	89 81       	ldd	r24, Y+1	; 0x01
    26f4:	9a 81       	ldd	r25, Y+2	; 0x02
    26f6:	01 97       	sbiw	r24, 0x01	; 1
    26f8:	f1 f7       	brne	.-4      	; 0x26f6 <main+0x1f0>
    26fa:	9a 83       	std	Y+2, r25	; 0x02
    26fc:	89 83       	std	Y+1, r24	; 0x01
    26fe:	15 cf       	rjmp	.-470    	; 0x252a <main+0x24>

00002700 <__prologue_saves__>:
    2700:	2f 92       	push	r2
    2702:	3f 92       	push	r3
    2704:	4f 92       	push	r4
    2706:	5f 92       	push	r5
    2708:	6f 92       	push	r6
    270a:	7f 92       	push	r7
    270c:	8f 92       	push	r8
    270e:	9f 92       	push	r9
    2710:	af 92       	push	r10
    2712:	bf 92       	push	r11
    2714:	cf 92       	push	r12
    2716:	df 92       	push	r13
    2718:	ef 92       	push	r14
    271a:	ff 92       	push	r15
    271c:	0f 93       	push	r16
    271e:	1f 93       	push	r17
    2720:	cf 93       	push	r28
    2722:	df 93       	push	r29
    2724:	cd b7       	in	r28, 0x3d	; 61
    2726:	de b7       	in	r29, 0x3e	; 62
    2728:	ca 1b       	sub	r28, r26
    272a:	db 0b       	sbc	r29, r27
    272c:	0f b6       	in	r0, 0x3f	; 63
    272e:	f8 94       	cli
    2730:	de bf       	out	0x3e, r29	; 62
    2732:	0f be       	out	0x3f, r0	; 63
    2734:	cd bf       	out	0x3d, r28	; 61
    2736:	09 94       	ijmp

00002738 <__epilogue_restores__>:
    2738:	2a 88       	ldd	r2, Y+18	; 0x12
    273a:	39 88       	ldd	r3, Y+17	; 0x11
    273c:	48 88       	ldd	r4, Y+16	; 0x10
    273e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2740:	6e 84       	ldd	r6, Y+14	; 0x0e
    2742:	7d 84       	ldd	r7, Y+13	; 0x0d
    2744:	8c 84       	ldd	r8, Y+12	; 0x0c
    2746:	9b 84       	ldd	r9, Y+11	; 0x0b
    2748:	aa 84       	ldd	r10, Y+10	; 0x0a
    274a:	b9 84       	ldd	r11, Y+9	; 0x09
    274c:	c8 84       	ldd	r12, Y+8	; 0x08
    274e:	df 80       	ldd	r13, Y+7	; 0x07
    2750:	ee 80       	ldd	r14, Y+6	; 0x06
    2752:	fd 80       	ldd	r15, Y+5	; 0x05
    2754:	0c 81       	ldd	r16, Y+4	; 0x04
    2756:	1b 81       	ldd	r17, Y+3	; 0x03
    2758:	aa 81       	ldd	r26, Y+2	; 0x02
    275a:	b9 81       	ldd	r27, Y+1	; 0x01
    275c:	ce 0f       	add	r28, r30
    275e:	d1 1d       	adc	r29, r1
    2760:	0f b6       	in	r0, 0x3f	; 63
    2762:	f8 94       	cli
    2764:	de bf       	out	0x3e, r29	; 62
    2766:	0f be       	out	0x3f, r0	; 63
    2768:	cd bf       	out	0x3d, r28	; 61
    276a:	ed 01       	movw	r28, r26
    276c:	08 95       	ret

0000276e <_exit>:
    276e:	f8 94       	cli

00002770 <__stop_program>:
    2770:	ff cf       	rjmp	.-2      	; 0x2770 <__stop_program>
